@model ProDat.Web2.ViewModels.EngDataKeyListViewModel

@{
    if (Model != null)
    {
        var ms = Model.KeyListId;
        var id = -1;
        if (ms != 0 && ms != null)
            id = (int)ms;


        @(Html.DevExtreme().DataGrid<ProDat.Web2.ViewModels.EngDataKeyListViewModel>()
                    .ID("KeyListAttributesX")
            .DataSource(d => d.Mvc()
                .Controller("UC5")
                //.LoadParams(new { parent = Model.parent })
                        .LoadAction("KeyListAttributes_GetData")
                        .Key("KeyListId")
            )
            @* .OnContextMenuPreparing("KeyListEngDataGrid_OnContextMenuPreparing")*@
            .RemoteOperations(false)
            .Columns(
                columns =>
                {
                    //columns.AddFor(m => m.EngDataClassxEngDataCodeId)
                            columns.AddFor(m => m.engDataClass).Caption("Group");
                            columns.AddFor(m => m.engDataCodeName).Caption("Name");
                            columns.AddFor(m => m.engDataCodeDesc).Caption("Description");
                            columns.AddFor(m => m.alias).Caption("Alias");
                            //columns.AddFor(m => m.Eng).Caption("Data Code");
                    @*            .Lookup(lookup => lookup
                    .DataSource(d => d.Mvc().Controller("Lookups").LoadAction("MaintStrategy_Lookup").Key("Value"))
                    .ValueExpr("Value")
                    .DisplayExpr("Text")
                );*@
                })
            .FilterRow(f => f.Visible(true))
            .HeaderFilter(f => f.Visible(true))
            .GroupPanel(p => p.Visible(false))
            .Scrolling(s => s.Mode(GridScrollingMode.Virtual))
            .AllowColumnResizing(true)
            .ColumnAutoWidth(true)
            //.Selection(x => x.Mode(SelectionMode.Single))
                    .OnSelectionChanged("KeyListAttributes_SelectionChanged")
            @*.Height(mod_h)*@
            //.Width(Model.width)
            .ShowBorders(true)
            .Editing(e => e.AllowAdding(false).AllowDeleting(false).AllowUpdating(false))

            )
        {
            <input type="hidden" id="parent" value="@id" />
        }
    }
}