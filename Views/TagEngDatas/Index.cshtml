
@{ //ViewData["Title"] = "TagEngDatas";
   ViewData["Title"] = "Eng. Attributes " + ViewBag.TagNumDesc;
   int tagId = ViewBag.TagId;
 }
<h4>
    Eng. Attributes @(ViewBag.TagNumDesc)
    </h4>
<div id="form" class="dx-swatch-Datagrid_White" style="overflow-y: hidden; overflow-x: hidden">
    <!-- <div id="form" style="overflow-y: hidden; overflow-x: hidden"> -->
    @(Html.DevExtreme().DataGrid<ProDat.Web2.Models.TagEngData>()
            .ID("TagEngDatas")
            .Height(1150)
            //.Width()
            .DataSource(ds => ds.Mvc()
               .Controller("TagEngDatas")
               .LoadAction("TagEngDatas_GetData")
               .InsertAction("TagEngDatas_Insert")
               .UpdateAction("TagEngDatas_Update")
               .DeleteAction("TagEngDatas_Delete")
               .Key("TagId", "EngDataCodeId")
               .LoadParams(new { TagId = @tagId })
               //.Key("TagEngDataId")
            )
            .Editing(editing =>
            {
                editing.Mode(GridEditMode.Cell);
                editing.AllowUpdating(true);
                editing.AllowAdding(true);
                editing.AllowDeleting(true);
            })
            .Selection(s => s.Mode(SelectionMode.Multiple))
            .Export(e => e.Enabled(true).AllowExportSelectedData(true))
            .OnExporting("exporting")
            .RemoteOperations(false)
            .AllowColumnReordering(true)
            .RowAlternationEnabled(true)
            .ShowBorders(true)
            .FilterRow(f => f.Visible(true))
            .CustomizeColumns("ignoreIDValidation")

            //Do not need column chooser because there are not many columns
            //.ColumnChooser(c => c.Enabled(true))
            .ColumnFixing(c => c.Enabled(true))
            .ColumnResizingMode(ColumnResizingMode.Widget)
            .AllowColumnResizing(true)
            .SearchPanel(s => s
                .Visible(true)
                .HighlightCaseSensitive(true)
             )

            //.GroupPanel(g => g.Visible(true))
            .Grouping(g => g.AutoExpandAll(false))
            .Scrolling(s => s.Mode(GridScrollingMode.Virtual))
            .Paging(p => p.PageSize(45))

            //.OnCellPrepared("DataGrid_OnCellPrepared")
            .Columns(columns =>
            {
                columns.AddFor(x => x.TagId).Visible(false);

                columns.AddFor(x => x.EngDataCodeId)
                .Lookup(lookup => lookup
                        .DataSource(d => d.Mvc().Controller("Lookups").LoadAction("EngDataCode_Lookup").Key("Value"))
                        .ValueExpr("Value")
                        .DisplayExpr("Text")
                    );

                columns.AddFor(x => x.EngDatavalue);

                columns.AddFor(x => x.EngDataComment);
                
                columns.AddFor(x => x.EngDatasource);

            })
        )
</div>

<!-- UI structure to test SAP Validations -->

<script src="https://cdnjs.cloudflare.com/ajax/libs/exceljs/3.3.1/exceljs.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/FileSaver.js/1.3.8/FileSaver.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/babel-polyfill/7.4.0/polyfill.min.js"></script>
<script>
    document.getElementById("layoutHeader").style.display = "none";
</script>

<!-- Lookup functions -->
<script>// need to create one of these for every star field... If I could retrieve the FieldName it was related to, I could build on the fly..

    function setCellValue_EngDataCodeId(newData, value, currentRowData) {
        if (value < 0) {
            newData.EngDataCodeId = currentRowData.EngDataCodeId;
            target = '/EngDataCodes';
            window.open(target);
        }
        else {
            newData.EngDataCodeId = value;
        }
    }</script>

<!-- context menu management & export to excel -->
<script>// Export to excel.
    function exporting(e) {
        var workbook = new ExcelJS.Workbook();
        var worksheet = workbook.addWorksheet('ProDat TagEngDatas');

        DevExpress.excelExporter.exportDataGrid({
            component: e.component,
            worksheet: worksheet,
            autoFilterEnabled: true
        }).then(function () {
            // https://github.com/exceljs/exceljs#writing-xlsx
            workbook.xlsx.writeBuffer().then(function (buffer) {
                saveAs(new Blob([buffer], { type: 'application/octet-stream' }), 'TagEngDatas.xlsx');
            });
        });
        e.cancel = true;
    }</script>

<script>function ignoreIDValidation(columns) {
        columns[0].validationRules = null;
    }</script>
