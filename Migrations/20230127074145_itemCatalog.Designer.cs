// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProDat.Web2.Data;

namespace ProDat.Web2.Migrations
{
    [DbContext(typeof(TagContext))]
    [Migration("20230127074145_itemCatalog")]
    partial class itemCatalog
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.32")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ProDat.Web2.Models.Area", b =>
                {
                    b.Property<int>("AreaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AreaID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AreaDisc")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("AreaName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("MaintenancePlantId")
                        .HasColumnName("MaintenancePlantID")
                        .HasColumnType("int");

                    b.HasKey("AreaId");

                    b.HasIndex("AreaName")
                        .IsUnique()
                        .HasName("U_Area");

                    b.HasIndex("MaintenancePlantId");

                    b.ToTable("Area");
                });

            modelBuilder.Entity("ProDat.Web2.Models.BccCode", b =>
                {
                    b.Property<int>("BccCodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BccCodeDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BccCodeNumber")
                        .HasColumnType("int");

                    b.HasKey("BccCodeId");

                    b.ToTable("BccCode");
                });

            modelBuilder.Entity("ProDat.Web2.Models.ClassCharacteristics", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CharDesc")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Characteristic")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Class")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("ClassDesc")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("DropdownText")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("DropdownTextValue")
                        .HasColumnName("DropdownText Value")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("DropdownValDesc")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("Class")
                        .IsUnique()
                        .HasName("U_Class");

                    b.ToTable("ClassCharacteristics");
                });

            modelBuilder.Entity("ProDat.Web2.Models.ClassCharsTaskListHeader", b =>
                {
                    b.Property<int>("ClassCharsTaskListHeaderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ClassCharsTaskListHeaderID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CharDesc")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("CharValue")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Characteristic")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Class")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("ClassDesc")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("CntrAssociation")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("GroupAssociation")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("ClassCharsTaskListHeaderId");

                    b.ToTable("ClassCharsTaskListHeader");
                });

            modelBuilder.Entity("ProDat.Web2.Models.ColumnSets", b =>
                {
                    b.Property<int>("ColumnSetsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ColumnName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ColumnOrder")
                        .HasColumnType("int");

                    b.Property<string>("ColumnSetsEntity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ColumnSetsName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ColumnSetsOrder")
                        .HasColumnType("int");

                    b.Property<bool>("ColumnVisible")
                        .HasColumnType("bit");

                    b.Property<int>("ColumnWidth")
                        .HasColumnType("int");

                    b.HasKey("ColumnSetsId");

                    b.ToTable("ColumnSets");
                });

            modelBuilder.Entity("ProDat.Web2.Models.CommClass", b =>
                {
                    b.Property<int>("CommClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CommClassID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CommClassDesc")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("CommClassName")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("CommClassId");

                    b.HasIndex("CommClassName")
                        .IsUnique()
                        .HasName("U_CommClass");

                    b.ToTable("CommClass");
                });

            modelBuilder.Entity("ProDat.Web2.Models.CommSubSystem", b =>
                {
                    b.Property<int>("CommSubSystemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CommSubSystemID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CommSubSystemName")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("CommSubSystemNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("Spid")
                        .HasColumnName("SPID")
                        .HasColumnType("int");

                    b.Property<int>("SystemId")
                        .HasColumnName("SystemID")
                        .HasColumnType("int");

                    b.HasKey("CommSubSystemId");

                    b.HasIndex("CommSubSystemNo")
                        .IsUnique()
                        .HasName("U_CommSubSystem");

                    b.HasIndex("Spid");

                    b.HasIndex("SystemId");

                    b.ToTable("CommSubSystem");
                });

            modelBuilder.Entity("ProDat.Web2.Models.CommZone", b =>
                {
                    b.Property<int>("CommZoneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CommZoneID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CommZoneDesc")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("CommZoneName")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int>("ProjectId")
                        .HasColumnName("ProjectID")
                        .HasColumnType("int");

                    b.HasKey("CommZoneId");

                    b.HasIndex("CommZoneName")
                        .IsUnique()
                        .HasName("U_CommZone");

                    b.HasIndex("ProjectId");

                    b.ToTable("CommZone");
                });

            modelBuilder.Entity("ProDat.Web2.Models.CompanyCode", b =>
                {
                    b.Property<int>("CompanyCodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CompanyCodeDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyCodeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CompanyCodeId");

                    b.ToTable("CompanyCode");
                });

            modelBuilder.Entity("ProDat.Web2.Models.ControlKey", b =>
                {
                    b.Property<int>("ControlKeyId")
                        .HasColumnName("ControlKeyID")
                        .HasColumnType("int");

                    b.Property<string>("ControlKeyDesc")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("ControlKeyName")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("ControlKeyId");

                    b.ToTable("ControlKey");
                });

            modelBuilder.Entity("ProDat.Web2.Models.Doc", b =>
                {
                    b.Property<int>("DocId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DocID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DocAlias")
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.Property<string>("DocComments")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("DocLink")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("DocNum")
                        .IsRequired()
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.Property<string>("DocSource")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("DocTitle")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("DocTypeId")
                        .HasColumnName("DocTypeID")
                        .HasColumnType("int");

                    b.HasKey("DocId");

                    b.HasIndex("DocNum")
                        .IsUnique()
                        .HasName("U_DocNum");

                    b.HasIndex("DocTypeId");

                    b.ToTable("Doc");
                });

            modelBuilder.Entity("ProDat.Web2.Models.DocType", b =>
                {
                    b.Property<int>("DocTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DocTypeID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DocTypeDesc")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int>("DocTypeDiscId")
                        .HasColumnType("int");

                    b.Property<string>("DocTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("EngDiscId")
                        .HasColumnType("int");

                    b.HasKey("DocTypeId");

                    b.HasIndex("DocTypeName")
                        .IsUnique()
                        .HasName("U_DocType");

                    b.HasIndex("EngDiscId");

                    b.ToTable("DocType");
                });

            modelBuilder.Entity("ProDat.Web2.Models.ETL.Import", b =>
                {
                    b.Property<int>("ImportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Approved")
                        .HasColumnType("datetime2");

                    b.Property<string>("ApprovedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApprovedComment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedComment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImportStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ImportTypeId")
                        .HasColumnType("int");

                    b.HasKey("ImportId");

                    b.HasIndex("ImportTypeId");

                    b.ToTable("Import");
                });

            modelBuilder.Entity("ProDat.Web2.Models.ETL.ImportError", b =>
                {
                    b.Property<int>("ImportErrorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ErrorDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ErrorVector")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ImportExtractId")
                        .HasColumnType("int");

                    b.Property<int>("ImportId")
                        .HasColumnType("int");

                    b.Property<int?>("ImportTransformId")
                        .HasColumnType("int");

                    b.HasKey("ImportErrorId");

                    b.HasIndex("ImportExtractId")
                        .IsUnique()
                        .HasFilter("[ImportExtractId] IS NOT NULL");

                    b.HasIndex("ImportId");

                    b.HasIndex("ImportTransformId");

                    b.ToTable("ImportError");
                });

            modelBuilder.Entity("ProDat.Web2.Models.ETL.ImportExtract", b =>
                {
                    b.Property<int>("ImportExtractId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AttributeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AttributeValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EntityName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EntityPseudoFK2Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EntityPseudoFK2Value")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EntityPseudoFKName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EntityPseudoFKValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EntityPseudoPK")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EntityPseudoPK2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ImportId")
                        .HasColumnType("int");

                    b.HasKey("ImportExtractId");

                    b.HasIndex("ImportId");

                    b.ToTable("ImportExtract");
                });

            modelBuilder.Entity("ProDat.Web2.Models.ETL.ImportTransform", b =>
                {
                    b.Property<int>("ImportTransformId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AttributeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AttributeValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AttributeValueOld")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AttributeValueTxt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AttributeValueType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EntityName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EntityPK")
                        .HasColumnType("int");

                    b.Property<int>("EntityPK2")
                        .HasColumnType("int");

                    b.Property<string>("EntityPseudoPK")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ImportId")
                        .HasColumnType("int");

                    b.Property<string>("LoadType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ImportTransformId");

                    b.HasIndex("ImportId");

                    b.ToTable("ImportTransform");
                });

            modelBuilder.Entity("ProDat.Web2.Models.ETL.ImportType", b =>
                {
                    b.Property<int>("ImportTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImportTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ImportTypeId");

                    b.ToTable("ImportType");
                });

            modelBuilder.Entity("ProDat.Web2.Models.EngClass", b =>
                {
                    b.Property<int>("EngClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("EngClassID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EngClassDesc")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("EngClassName")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int>("SuperClassID")
                        .HasColumnType("int");

                    b.HasKey("EngClassId");

                    b.HasIndex("EngClassName")
                        .IsUnique()
                        .HasName("U_EngClass");

                    b.HasIndex("SuperClassID");

                    b.ToTable("EngClass");
                });

            modelBuilder.Entity("ProDat.Web2.Models.EngClassRequiredDocs", b =>
                {
                    b.Property<int>("EngClassRequiredDocsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BCC")
                        .HasColumnType("int");

                    b.Property<int>("DocTypeId")
                        .HasColumnName("DocTypeId")
                        .HasColumnType("int");

                    b.Property<int>("EngClassId")
                        .HasColumnType("int");

                    b.HasKey("EngClassRequiredDocsId");

                    b.HasIndex("DocTypeId");

                    b.HasIndex("EngClassId")
                        .IsUnique();

                    b.ToTable("EngClassRequiredDocs");
                });

            modelBuilder.Entity("ProDat.Web2.Models.EngDataClass", b =>
                {
                    b.Property<int>("EngDataClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EngDataClassName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EngDataClassId");

                    b.ToTable("EngDataClass");
                });

            modelBuilder.Entity("ProDat.Web2.Models.EngDataClassxEngDataCode", b =>
                {
                    b.Property<int>("EngDataClassxEngDataCodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BccCodeId")
                        .HasColumnType("int");

                    b.Property<int>("EngClassId")
                        .HasColumnType("int");

                    b.Property<int>("EngDataCodeId")
                        .HasColumnType("int");

                    b.HasKey("EngDataClassxEngDataCodeId");

                    b.HasIndex("BccCodeId");

                    b.HasIndex("EngClassId");

                    b.HasIndex("EngDataCodeId");

                    b.ToTable("EngDataClassxEngDataCode");
                });

            modelBuilder.Entity("ProDat.Web2.Models.EngDataCode", b =>
                {
                    b.Property<int>("EngDataCodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("EngDataCodeID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EngDataClassId")
                        .HasColumnType("int");

                    b.Property<string>("EngDataCodeDDLType")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("EngDataCodeDesc")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("EngDataCodeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("EngDataCodeNotes")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("EngDataCodeSAPDesc")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<bool>("HideFromUI")
                        .HasColumnType("bit");

                    b.HasKey("EngDataCodeId");

                    b.HasIndex("EngDataClassId");

                    b.HasIndex("EngDataCodeName")
                        .IsUnique()
                        .HasName("U_EngDataCodeName");

                    b.ToTable("EngDataCode");
                });

            modelBuilder.Entity("ProDat.Web2.Models.EngDataCodeDropDown", b =>
                {
                    b.Property<int>("EngDataCodeDropDownId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EngDataCodeDropDownDesc")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("EngDataCodeDropDownValue")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int>("EngDataCodeId")
                        .HasColumnType("int");

                    b.HasKey("EngDataCodeDropDownId");

                    b.HasIndex("EngDataCodeId");

                    b.ToTable("EngDataCodeDropDown");
                });

            modelBuilder.Entity("ProDat.Web2.Models.EngDisc", b =>
                {
                    b.Property<int>("EngDiscId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("EngDiscID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EngDiscDesc")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("EngDiscName")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("EngDiscId");

                    b.HasIndex("EngDiscName")
                        .IsUnique()
                        .HasName("U_EngDisc");

                    b.ToTable("EngDisc");
                });

            modelBuilder.Entity("ProDat.Web2.Models.EngStatus", b =>
                {
                    b.Property<int>("EngStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("EngStatusID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EngStatusName")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("EngStatusId");

                    b.HasIndex("EngStatusName")
                        .IsUnique();

                    b.ToTable("EngStatus");
                });

            modelBuilder.Entity("ProDat.Web2.Models.EnvZone", b =>
                {
                    b.Property<int>("EnvZoneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("EnvZoneID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EnvZoneDesc")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("EnvZoneName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("EnvZoneId");

                    b.HasIndex("EnvZoneName")
                        .IsUnique()
                        .HasName("U_EnvZone");

                    b.ToTable("EnvZone");
                });

            modelBuilder.Entity("ProDat.Web2.Models.EquipmentTypes", b =>
                {
                    b.Property<int>("EquipTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EquipTypeDesc")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EquipTypeID");

                    b.ToTable("EquipmentTypes");
                });

            modelBuilder.Entity("ProDat.Web2.Models.ExMethod", b =>
                {
                    b.Property<int>("ExMethodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ExMethodID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ExMethodDesc")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("ExMethodName")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("ExMethodId");

                    b.HasIndex("ExMethodName")
                        .IsUnique()
                        .HasName("U_ExMethod");

                    b.ToTable("ExMethod");
                });

            modelBuilder.Entity("ProDat.Web2.Models.FlocType", b =>
                {
                    b.Property<int>("FlocTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FlocTypeDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FlocTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FlocTypeId");

                    b.ToTable("FlocType");
                });

            modelBuilder.Entity("ProDat.Web2.Models.FlocXmaintItem", b =>
                {
                    b.Property<int>("FlocId")
                        .HasColumnName("FlocID")
                        .HasColumnType("int");

                    b.Property<int>("MaintItemId")
                        .HasColumnName("MaintItemID")
                        .HasColumnType("int");

                    b.HasKey("FlocId", "MaintItemId");

                    b.HasIndex("MaintItemId");

                    b.ToTable("FlocXMaintItem");
                });

            modelBuilder.Entity("ProDat.Web2.Models.FlocXmaintLoad", b =>
                {
                    b.Property<int>("TagId")
                        .HasColumnName("TagID")
                        .HasColumnType("int");

                    b.Property<int>("MaintLoadId")
                        .HasColumnName("MaintLoadID")
                        .HasColumnType("int");

                    b.HasKey("TagId", "MaintLoadId");

                    b.HasIndex("MaintLoadId");

                    b.ToTable("FlocXMaintLoad");
                });

            modelBuilder.Entity("ProDat.Web2.Models.FlocXmaintQuery", b =>
                {
                    b.Property<int>("FlocId")
                        .HasColumnName("FlocID")
                        .HasColumnType("int");

                    b.Property<int>("MaintQueryId")
                        .HasColumnName("MaintQueryID")
                        .HasColumnType("int");

                    b.HasKey("FlocId", "MaintQueryId");

                    b.HasIndex("MaintQueryId");

                    b.ToTable("FlocXMaintQuery");
                });

            modelBuilder.Entity("ProDat.Web2.Models.FlocXpmassembly", b =>
                {
                    b.Property<int>("TagId")
                        .HasColumnName("TagID")
                        .HasColumnType("int");

                    b.Property<int>("PmassemblyId")
                        .HasColumnName("PMAssemblyID")
                        .HasColumnType("int");

                    b.HasKey("TagId", "PmassemblyId");

                    b.HasIndex("PmassemblyId");

                    b.ToTable("FlocXPMAssembly");
                });

            modelBuilder.Entity("ProDat.Web2.Models.History", b =>
                {
                    b.Property<int>("HistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AttributeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AttributeValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EntityName")
                        .HasColumnType("int");

                    b.Property<int>("ImportId")
                        .HasColumnType("int");

                    b.Property<int>("Pk1")
                        .HasColumnType("int");

                    b.Property<int>("Pk2")
                        .HasColumnType("int");

                    b.HasKey("HistoryId");

                    b.ToTable("History");
                });

            modelBuilder.Entity("ProDat.Web2.Models.Ipf", b =>
                {
                    b.Property<int>("IpfId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IpfID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("IpfDesc")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("IpfName")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("IpfId");

                    b.HasIndex("IpfName")
                        .IsUnique()
                        .HasName("U_Ipf");

                    b.ToTable("Ipf");
                });

            modelBuilder.Entity("ProDat.Web2.Models.ItemCatalog", b =>
                {
                    b.Property<int>("ItemCatalogID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ItemCatalogClientNum")
                        .HasColumnType("int");

                    b.Property<string>("ItemcatalogDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ItemCatalogID");

                    b.ToTable("ItemCatalog");
                });

            modelBuilder.Entity("ProDat.Web2.Models.KeyList", b =>
                {
                    b.Property<int>("KeyListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("KeyListName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("KeyListId");

                    b.ToTable("KeyList");
                });

            modelBuilder.Entity("ProDat.Web2.Models.KeyListxEngClass", b =>
                {
                    b.Property<int>("KeyListxEngClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EngClassID")
                        .HasColumnType("int");

                    b.Property<int>("KeyListId")
                        .HasColumnType("int");

                    b.HasKey("KeyListxEngClassId");

                    b.HasIndex("EngClassID");

                    b.HasIndex("KeyListId");

                    b.ToTable("KeyListxEngClass");
                });

            modelBuilder.Entity("ProDat.Web2.Models.KeyListxEngDataCode", b =>
                {
                    b.Property<int>("KeyListxEngDataCodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Alias")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ColumnNumber")
                        .HasColumnType("int");

                    b.Property<int>("EngDataCode")
                        .HasColumnType("int");

                    b.Property<int?>("EngDataCodesEngDataCodeId")
                        .HasColumnType("int");

                    b.Property<int>("KeyListId")
                        .HasColumnType("int");

                    b.HasKey("KeyListxEngDataCodeId");

                    b.HasIndex("EngDataCodesEngDataCodeId");

                    b.HasIndex("KeyListId");

                    b.ToTable("KeyListxEngDataCode");
                });

            modelBuilder.Entity("ProDat.Web2.Models.LoadTemplate", b =>
                {
                    b.Property<int>("LoadTemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("LoadTemplateID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LoadTemplateDesc")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("LoadTemplateName")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("LoadTemplateId");

                    b.HasIndex("LoadTemplateName")
                        .IsUnique()
                        .HasName("U_LoadTemplate");

                    b.ToTable("LoadTemplate");
                });

            modelBuilder.Entity("ProDat.Web2.Models.Location", b =>
                {
                    b.Property<int>("LocationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.Property<int?>("Elevation")
                        .HasColumnType("int");

                    b.Property<string>("Latitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocationDesc")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("LocationType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Longitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentLocationID")
                        .HasColumnType("int");

                    b.HasKey("LocationID");

                    b.HasIndex("ParentLocationID");

                    b.HasIndex("AreaId", "LocationName")
                        .IsUnique()
                        .HasName("U_Location");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("ProDat.Web2.Models.LocationTypes", b =>
                {
                    b.Property<int>("LocationTypesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LocationTypeDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LocationsLocationTypesId")
                        .HasColumnType("int");

                    b.HasKey("LocationTypesId");

                    b.HasIndex("LocationsLocationTypesId");

                    b.ToTable("LocationTypes");
                });

            modelBuilder.Entity("ProDat.Web2.Models.MaintArea", b =>
                {
                    b.Property<int>("MaintAreaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MaintAreaId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("MaintAreaDesc")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("MaintAreaName")
                        .IsRequired()
                        .HasColumnType("nvarchar(4)")
                        .HasMaxLength(4);

                    b.Property<int?>("PlantSectionId")
                        .HasColumnName("PlantSectionID")
                        .HasColumnType("int");

                    b.HasKey("MaintAreaId");

                    b.HasIndex("MaintAreaName")
                        .IsUnique()
                        .HasName("U_MaintArea");

                    b.HasIndex("PlantSectionId");

                    b.ToTable("MaintArea");
                });

            modelBuilder.Entity("ProDat.Web2.Models.MaintClass", b =>
                {
                    b.Property<int>("MaintClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("MaintClassDesc")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("MaintClassName")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("MaintClassId");

                    b.ToTable("MaintClass");
                });

            modelBuilder.Entity("ProDat.Web2.Models.MaintClassXEngDataCode", b =>
                {
                    b.Property<int>("MaintClassId")
                        .HasColumnType("int");

                    b.Property<int>("EngDataCodeId")
                        .HasColumnType("int");

                    b.HasKey("MaintClassId", "EngDataCodeId");

                    b.HasIndex("EngDataCodeId");

                    b.ToTable("MaintClassXEngDataCode");
                });

            modelBuilder.Entity("ProDat.Web2.Models.MaintCriticality", b =>
                {
                    b.Property<int>("MaintCriticalityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MaintCriticalityID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("MaintCriticalityDesc")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("MaintCriticalityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("MaintCriticalityId");

                    b.HasIndex("MaintCriticalityName")
                        .IsUnique()
                        .HasName("U_MaintCriticality");

                    b.ToTable("MaintCriticality");
                });

            modelBuilder.Entity("ProDat.Web2.Models.MaintEdcCode", b =>
                {
                    b.Property<int>("MaintEdcCodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MaintEdcCodeID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("MaintEdcCodeDesc")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("MaintEdcCodeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(8)")
                        .HasMaxLength(8);

                    b.HasKey("MaintEdcCodeId");

                    b.HasIndex("MaintEdcCodeName")
                        .IsUnique()
                        .HasName("U_MaintEdcCode");

                    b.ToTable("MaintEdcCode");
                });

            modelBuilder.Entity("ProDat.Web2.Models.MaintItem", b =>
                {
                    b.Property<int>("MaintItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MaintItemID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FMaintItemHeaderFloc")
                        .HasColumnName("fMaintItemHeaderFloc")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("HeaderFlocId")
                        .HasColumnType("int");

                    b.Property<string>("MaintItemActivityTypeId")
                        .HasColumnName("MaintItemActivityTypeID")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("MaintItemConsequence")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("MaintItemConsequenceCategory")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("MaintItemDoNotRelImmed")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("MaintItemHeaderEquipId")
                        .HasColumnName("MaintItemHeaderEquipID")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("MaintItemLikelihood")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("MaintItemLongText")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("MaintItemMainWorkCentre")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("MaintItemMainWorkCentrePlant")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("MaintItemNum")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("MaintItemObjectListEquip")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("MaintItemObjectListFloc")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("MaintItemOrderType")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("MaintItemProposedPriority")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("MaintItemProposedTi")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("MaintItemRevNo")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("MaintItemShortText")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("MaintItemSystemCondition_Old")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaintItemTasklistExecutionFactor")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("MaintItemUserStatus")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("MaintPlanId")
                        .IsRequired()
                        .HasColumnName("MaintPlanID")
                        .HasColumnType("int")
                        .HasMaxLength(255);

                    b.Property<int?>("MaintPlannerGroupId")
                        .HasColumnName("MaintPlannerGroupID")
                        .HasColumnType("int")
                        .HasMaxLength(255);

                    b.Property<int?>("MaintWorkCentreId")
                        .HasColumnType("int");

                    b.Property<int?>("MaintenancePlantId")
                        .HasColumnType("int");

                    b.Property<int?>("PriorityId")
                        .HasColumnType("int");

                    b.Property<int?>("SysCondId")
                        .HasColumnType("int");

                    b.Property<double?>("TaskListExecutionFactor")
                        .HasColumnType("float");

                    b.Property<bool>("bDoNotRelImmed")
                        .HasColumnType("bit");

                    b.HasKey("MaintItemId");

                    b.HasIndex("HeaderFlocId");

                    b.HasIndex("MaintItemNum")
                        .IsUnique()
                        .HasName("U_MaintItemNum");

                    b.HasIndex("MaintPlanId");

                    b.HasIndex("MaintPlannerGroupId");

                    b.HasIndex("MaintWorkCentreId");

                    b.HasIndex("MaintenancePlantId");

                    b.HasIndex("PriorityId");

                    b.HasIndex("SysCondId");

                    b.ToTable("MaintItem");
                });

            modelBuilder.Entity("ProDat.Web2.Models.MaintItemXmaintTaskListHeader", b =>
                {
                    b.Property<int>("MaintItemId")
                        .HasColumnName("MaintItemID")
                        .HasColumnType("int");

                    b.Property<int>("TaskListHeaderId")
                        .HasColumnName("TaskListHeaderId")
                        .HasColumnType("int");

                    b.HasKey("MaintItemId", "TaskListHeaderId");

                    b.HasIndex("TaskListHeaderId");

                    b.ToTable("MaintItemXMaintTaskList");
                });

            modelBuilder.Entity("ProDat.Web2.Models.MaintLoad", b =>
                {
                    b.Property<int>("MaintLoadId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MaintLoadID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LoadTemplateId")
                        .HasColumnName("LoadTemplateID")
                        .HasColumnType("int");

                    b.Property<string>("MaintLoadComment")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("MaintLoadNum")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("MaintLoadId");

                    b.HasIndex("LoadTemplateId");

                    b.HasIndex("MaintLoadNum")
                        .IsUnique()
                        .HasName("U_MaintLoadNum");

                    b.ToTable("MaintLoad");
                });

            modelBuilder.Entity("ProDat.Web2.Models.MaintLocation", b =>
                {
                    b.Property<int>("MaintLocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MaintLocationID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("MaintAreaId")
                        .HasColumnName("MaintAreaId")
                        .HasColumnType("int");

                    b.Property<string>("MaintLocationDesc")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("MaintLocationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("MaintLocationId");

                    b.HasIndex("MaintAreaId");

                    b.HasIndex("MaintLocationName")
                        .IsUnique()
                        .HasName("U_MaintLocation");

                    b.ToTable("MaintLocation");
                });

            modelBuilder.Entity("ProDat.Web2.Models.MaintObjectType", b =>
                {
                    b.Property<int>("MaintObjectTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MaintObjectTypeID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("MaintObjectTypeDesc")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("MaintObjectTypeDescExt")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("MaintObjectTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("StdNounModifier")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("MaintObjectTypeId");

                    b.HasIndex("MaintObjectTypeName")
                        .IsUnique()
                        .HasName("U_maintobjecttype");

                    b.ToTable("MaintObjectType");
                });

            modelBuilder.Entity("ProDat.Web2.Models.MaintObjectTypeXMaintClass", b =>
                {
                    b.Property<int>("MaintObjectTypeId")
                        .HasColumnType("int");

                    b.Property<int>("MaintClassId")
                        .HasColumnType("int");

                    b.HasKey("MaintObjectTypeId", "MaintClassId");

                    b.HasIndex("MaintClassId");

                    b.ToTable("MaintObjectTypeXMaintClass");
                });

            modelBuilder.Entity("ProDat.Web2.Models.MaintPackage", b =>
                {
                    b.Property<int>("MaintPackageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MaintPackageID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MaintPackageCycleLength")
                        .HasColumnType("int");

                    b.Property<string>("MaintPackageCycleText")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("MaintPackageCycleUnit")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("MaintPackageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("MaintPackageId");

                    b.HasIndex("MaintPackageName")
                        .IsUnique()
                        .HasName("U_MaintPackageName");

                    b.ToTable("MaintPackage");
                });

            modelBuilder.Entity("ProDat.Web2.Models.MaintPlan", b =>
                {
                    b.Property<int>("MaintPlanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MaintPlanID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CallHorizon")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("ChangeStatus")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<double?>("CycleModFactor")
                        .HasColumnType("float")
                        .HasMaxLength(255);

                    b.Property<string>("MaintPlanName")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int>("MaintSortProcessId")
                        .HasColumnName("MaintSortProcessID")
                        .HasColumnType("int");

                    b.Property<int?>("MaintStrategyId")
                        .HasColumnName("MaintStrategyID")
                        .HasColumnType("int");

                    b.Property<int?>("MeasPointId")
                        .HasColumnName("MeasPointID")
                        .HasColumnType("int");

                    b.Property<int?>("SchedulingPeriodUomId")
                        .HasColumnType("int");

                    b.Property<int?>("SchedulingPeriodValue")
                        .HasColumnType("int")
                        .HasMaxLength(255);

                    b.Property<string>("ShortText")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Sort")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("StartDate")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("StartingInstructions")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("MaintPlanId");

                    b.HasIndex("MaintPlanName")
                        .IsUnique()
                        .HasName("U_MaintPlan");

                    b.HasIndex("MaintSortProcessId");

                    b.HasIndex("MaintStrategyId");

                    b.HasIndex("MeasPointId");

                    b.ToTable("MaintPlan");
                });

            modelBuilder.Entity("ProDat.Web2.Models.MaintPlannerGroup", b =>
                {
                    b.Property<int>("MaintPlannerGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MaintPlannerGroupID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("MaintPlannerGroupDesc")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("MaintPlannerGroupName")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("MaintPlannerGroupId");

                    b.HasIndex("MaintPlannerGroupName")
                        .IsUnique()
                        .HasName("U_MaintPlannerGroup");

                    b.ToTable("MaintPlannerGroup");
                });

            modelBuilder.Entity("ProDat.Web2.Models.MaintQuery", b =>
                {
                    b.Property<int>("MaintQueryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MaintQueryID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("MaintQueryClosedBy")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("MaintQueryClosedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("MaintQueryClosingNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaintQueryLongDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MaintQueryNoteId")
                        .HasColumnName("MaintQueryNoteID")
                        .HasColumnType("int");

                    b.Property<string>("MaintQueryNum")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("MaintQueryRaisedBy")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("MaintQueryRaisedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("MaintQueryTitle")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("MaintQueryId");

                    b.HasIndex("MaintQueryNoteId");

                    b.HasIndex("MaintQueryNum")
                        .IsUnique()
                        .HasName("U_MaintQueryNum");

                    b.ToTable("MaintQuery");
                });

            modelBuilder.Entity("ProDat.Web2.Models.MaintQueryNote", b =>
                {
                    b.Property<int>("MaintQueryNoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MaintQueryNoteID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("MaintQueryId")
                        .HasColumnName("MaintQueryID")
                        .HasColumnType("int");

                    b.Property<string>("MaintQueryNoteAttachments")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("MaintQueryNoteBy")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("MaintQueryNoteDate")
                        .HasColumnType("datetime");

                    b.Property<string>("MaintQueryNoteText")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MaintQueryNoteId");

                    b.ToTable("MaintQueryNote");
                });

            modelBuilder.Entity("ProDat.Web2.Models.MaintScePsReviewTeam", b =>
                {
                    b.Property<int>("MaintScePsReviewTeamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MaintScePsReviewTeamID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("MaintScePsReviewTeamDesc")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("MaintScePsReviewTeamName")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("MaintScePsReviewTeamId");

                    b.HasIndex("MaintScePsReviewTeamName")
                        .IsUnique()
                        .HasName("U_MaintScePsReviewTeam");

                    b.ToTable("MaintScePsReviewTeam");
                });

            modelBuilder.Entity("ProDat.Web2.Models.MaintSortProcess", b =>
                {
                    b.Property<int>("MaintSortProcessId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MaintSortProcessID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("MaintSortProcessDesc")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("MaintSortProcessName")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("MaintSortProcessId");

                    b.HasIndex("MaintSortProcessName")
                        .IsUnique()
                        .HasName("U_MaintSortProcess");

                    b.ToTable("MaintSortProcess");
                });

            modelBuilder.Entity("ProDat.Web2.Models.MaintStatus", b =>
                {
                    b.Property<int>("MaintStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("MaintStatusDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaintStatusName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MaintStatusId");

                    b.ToTable("MaintStatus");
                });

            modelBuilder.Entity("ProDat.Web2.Models.MaintStrategy", b =>
                {
                    b.Property<int>("MaintStrategyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MaintStrategyID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DocId")
                        .HasColumnName("DocID")
                        .HasColumnType("int");

                    b.Property<string>("MaintStrategyDesc")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("MaintStrategyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("MaintStrategyId");

                    b.HasIndex("DocId");

                    b.HasIndex("MaintStrategyName")
                        .IsUnique()
                        .HasName("U_MaintStrategy");

                    b.ToTable("MaintStrategy");
                });

            modelBuilder.Entity("ProDat.Web2.Models.MaintStructureIndicator", b =>
                {
                    b.Property<int>("MaintStructureIndicatorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MaintStructureIndicatorID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("MaintStructureIndicatorDesc")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("MaintStructureIndicatorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(5)")
                        .HasMaxLength(5);

                    b.HasKey("MaintStructureIndicatorId");

                    b.HasIndex("MaintStructureIndicatorName")
                        .IsUnique()
                        .HasName("U_MaintStructureIndicator");

                    b.ToTable("MaintStructureIndicator");
                });

            modelBuilder.Entity("ProDat.Web2.Models.MaintType", b =>
                {
                    b.Property<int>("MaintTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MaintTypeID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("MaintTypeDesc")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("MaintTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("MaintTypeId");

                    b.HasIndex("MaintTypeName")
                        .IsUnique()
                        .HasName("U_MaintType");

                    b.ToTable("MaintType");
                });

            modelBuilder.Entity("ProDat.Web2.Models.MaintWorkCentre", b =>
                {
                    b.Property<int>("MaintWorkCentreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MaintWorkCentreID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("MaintWorkCentreDesc")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("MaintWorkCentreName")
                        .IsRequired()
                        .HasColumnType("nvarchar(8)")
                        .HasMaxLength(8);

                    b.HasKey("MaintWorkCentreId");

                    b.HasIndex("MaintWorkCentreName")
                        .IsUnique()
                        .HasName("U_MaintWorkCentre");

                    b.ToTable("MaintWorkCentre");
                });

            modelBuilder.Entity("ProDat.Web2.Models.MaintenancePlant", b =>
                {
                    b.Property<int>("MaintenancePlantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MaintenancePlantID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("MaintenancePlantDesc")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("MaintenancePlantNum")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("MaintenancePlantId");

                    b.ToTable("MaintenancePlant");
                });

            modelBuilder.Entity("ProDat.Web2.Models.Manufacturer", b =>
                {
                    b.Property<int>("ManufacturerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ManufacturerID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ManufacturerDesc")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("ManufacturerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("ManufacturerId");

                    b.HasIndex("ManufacturerName")
                        .IsUnique()
                        .HasName("U_Manufacturer");

                    b.ToTable("Manufacturer");
                });

            modelBuilder.Entity("ProDat.Web2.Models.MeasPoint", b =>
                {
                    b.Property<int>("MeasPointId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MeasPointID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("MeasPointData")
                        .IsRequired()
                        .HasColumnType("nvarchar(2056)")
                        .HasMaxLength(2056);

                    b.Property<string>("MeasPointName")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("MeasPointId");

                    b.ToTable("MeasPoint");
                });

            modelBuilder.Entity("ProDat.Web2.Models.Model", b =>
                {
                    b.Property<int>("ModelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ModelID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ManufacturerId")
                        .HasColumnType("int");

                    b.Property<string>("ModelDesc")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("ModelId");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("ModelName")
                        .IsUnique()
                        .HasName("U_Model");

                    b.ToTable("Models");
                });

            modelBuilder.Entity("ProDat.Web2.Models.Operation", b =>
                {
                    b.Property<int>("OperationId")
                        .HasColumnName("OperationID")
                        .HasColumnType("int");

                    b.Property<string>("OperationName")
                        .IsRequired()
                        .HasColumnName("OperationNAme")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("OperationNotes")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("OperationId");

                    b.ToTable("Operation");
                });

            modelBuilder.Entity("ProDat.Web2.Models.Pbs", b =>
                {
                    b.Property<int>("PbsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PbsID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PbsDesc")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("PbsName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("PbsId");

                    b.HasIndex("PbsName")
                        .IsUnique()
                        .HasName("U_PBS");

                    b.ToTable("Pbs");
                });

            modelBuilder.Entity("ProDat.Web2.Models.PerformanceStandard", b =>
                {
                    b.Property<int>("PerformanceStandardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PerformanceStandardID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PerformanceStandardDesc")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("PerformanceStandardName")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("PerformanceStandardId");

                    b.HasIndex("PerformanceStandardName")
                        .IsUnique()
                        .HasName("U_PerformanceStandard");

                    b.ToTable("PerformanceStandard");
                });

            modelBuilder.Entity("ProDat.Web2.Models.PlannerPlant", b =>
                {
                    b.Property<int>("PlannerPlantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PlannerPlantDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlannerPlantName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PlannerPlantId");

                    b.ToTable("PlannerPlant");
                });

            modelBuilder.Entity("ProDat.Web2.Models.PlantSection", b =>
                {
                    b.Property<int>("PlantSectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PlantSectionID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PlantSectionDesc")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("PlantSectionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("PlantSectionId");

                    b.HasIndex("PlantSectionName")
                        .IsUnique()
                        .HasName("U_PlantSection");

                    b.ToTable("PlantSection");
                });

            modelBuilder.Entity("ProDat.Web2.Models.Pmassembly", b =>
                {
                    b.Property<int>("PmassemblyId")
                        .HasColumnName("PMAssemblyID")
                        .HasColumnType("int");

                    b.Property<string>("Make")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("PmassemblyName")
                        .IsRequired()
                        .HasColumnName("PMAssemblyName")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Rev")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("ShortText")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("PmassemblyId");

                    b.HasIndex("PmassemblyName")
                        .IsUnique()
                        .HasName("U_PMAssembly");

                    b.ToTable("PMAssembly");
                });

            modelBuilder.Entity("ProDat.Web2.Models.Po", b =>
                {
                    b.Property<int>("PoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("POID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PoCompany")
                        .HasColumnName("POCompany")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("PoDesc")
                        .HasColumnName("PODesc")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("PoName")
                        .IsRequired()
                        .HasColumnName("POName")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("PoId");

                    b.HasIndex("PoName")
                        .IsUnique()
                        .HasName("U_PO");

                    b.ToTable("PO");
                });

            modelBuilder.Entity("ProDat.Web2.Models.Priority", b =>
                {
                    b.Property<int>("PriorityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PriorityDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PriorityName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PriorityId");

                    b.ToTable("Priority");
                });

            modelBuilder.Entity("ProDat.Web2.Models.Project", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ProjectID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MaintHierarchy_LoadDepth")
                        .HasColumnType("int");

                    b.Property<int>("MaintenancePlantId")
                        .HasColumnName("MaintenancePlantID")
                        .HasColumnType("int");

                    b.Property<int>("MaintenanceRootTagId")
                        .HasColumnType("int");

                    b.Property<string>("ProjectCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.Property<string>("ProjectName")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("ProjectId");

                    b.HasIndex("MaintenancePlantId");

                    b.HasIndex("ProjectCode")
                        .IsUnique()
                        .HasName("U_ProjectCode");

                    b.ToTable("Project");
                });

            modelBuilder.Entity("ProDat.Web2.Models.RbiSil", b =>
                {
                    b.Property<int>("RbiSilId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RbiSilID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("RbiSilDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RbiSilDesc")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("RbiSilName")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("RbiSilId");

                    b.HasIndex("RbiSilName")
                        .IsUnique()
                        .HasName("U_RbiSil");

                    b.ToTable("RbiSil");
                });

            modelBuilder.Entity("ProDat.Web2.Models.Rbm", b =>
                {
                    b.Property<int>("RbmId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RbmID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RbmDesc")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("RbmName")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("RbmId");

                    b.HasIndex("RbmName")
                        .IsUnique()
                        .HasName("U_Rbm");

                    b.ToTable("Rbm");
                });

            modelBuilder.Entity("ProDat.Web2.Models.Rcm", b =>
                {
                    b.Property<int>("RcmId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RcmID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("RcmDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RcmDesc")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("RcmName")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("RcmId");

                    b.HasIndex("RcmName")
                        .IsUnique()
                        .HasName("U_Rcm");

                    b.ToTable("Rcm");
                });

            modelBuilder.Entity("ProDat.Web2.Models.RegulatoryBody", b =>
                {
                    b.Property<int>("RegulatoryBodyId")
                        .HasColumnName("RegulatoryBodyID")
                        .HasColumnType("int");

                    b.Property<string>("RegulatoryBodyDesc")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("RegulatoryBodyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("RegulatoryBodyId");

                    b.HasIndex("RegulatoryBodyName")
                        .IsUnique()
                        .HasName("U_RegulatoryBody");

                    b.ToTable("RegulatoryBody");
                });

            modelBuilder.Entity("ProDat.Web2.Models.RelationshipToOperation", b =>
                {
                    b.Property<int>("RelationshipToOperationId")
                        .HasColumnName("RelationshipToOperationID")
                        .HasColumnType("int");

                    b.Property<string>("RelationshipToOperationName")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("RelationshipToOperationNotes")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("RelationshipTypeId")
                        .HasColumnName("RelationshipTypeID")
                        .HasColumnType("int");

                    b.HasKey("RelationshipToOperationId");

                    b.HasIndex("RelationshipTypeId");

                    b.ToTable("RelationshipToOperation");
                });

            modelBuilder.Entity("ProDat.Web2.Models.RelationshipType", b =>
                {
                    b.Property<int>("RelationshipTypeId")
                        .HasColumnName("RelationshipTypeID")
                        .HasColumnType("int");

                    b.Property<string>("RelationshipTypeDesc")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("RelationshipTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("RelationshipTypeId");

                    b.ToTable("RelationshipType");
                });

            modelBuilder.Entity("ProDat.Web2.Models.SAPExportDetail", b =>
                {
                    b.Property<int>("SAPExportDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ColumnHeader_Legible")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ColumnHeader_SAP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ColumnOrder")
                        .HasColumnType("int");

                    b.Property<string>("DataType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mandatory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OutputName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PathName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SheetName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("limit")
                        .HasColumnType("int");

                    b.HasKey("SAPExportDetailId");

                    b.ToTable("SAPExportDetail");
                });

            modelBuilder.Entity("ProDat.Web2.Models.SAPRequirements.EntityAttribute", b =>
                {
                    b.Property<int>("EntityAttributeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EntityAttributeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EntityName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EntityAttributeId");

                    b.ToTable("EntityAttribute");
                });

            modelBuilder.Entity("ProDat.Web2.Models.SAPRequirements.EntityAttributeRequirement", b =>
                {
                    b.Property<int>("EntityAttributeRequirementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EntityAttributeId")
                        .HasColumnType("int");

                    b.Property<string>("EntityAttributeRequirementCondition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EntityAttributeRequirementType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EntityAttributeRequirementValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EntityAttributeRequirementValueType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EntityAttributeRequirementId");

                    b.HasIndex("EntityAttributeId");

                    b.ToTable("EntityAttributeRequirement");
                });

            modelBuilder.Entity("ProDat.Web2.Models.SAPStatus", b =>
                {
                    b.Property<int>("SAPStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ColourCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FontColourCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ForSAPExport")
                        .HasColumnType("bit");

                    b.Property<int>("StatusCode")
                        .HasColumnType("int");

                    b.HasKey("SAPStatusId");

                    b.ToTable("SAPStatus");
                });

            modelBuilder.Entity("ProDat.Web2.Models.ScePsreview", b =>
                {
                    b.Property<int>("ScePsreviewId")
                        .HasColumnName("ScePSReviewID")
                        .HasColumnType("int");

                    b.Property<string>("ScePsreviewDesc")
                        .HasColumnName("ScePSReviewDesc")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("ScePsreviewName")
                        .IsRequired()
                        .HasColumnName("ScePSReviewName")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("ScePsreviewId");

                    b.HasIndex("ScePsreviewName")
                        .IsUnique()
                        .HasName("U_ScePsReviewID");

                    b.ToTable("ScePSReview");
                });

            modelBuilder.Entity("ProDat.Web2.Models.SchedulingPeriodUOM", b =>
                {
                    b.Property<int>("SchedulingPeriodUOMId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("SchedulingPeriodUOMDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SchedulingPeriodUOMName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SchedulingPeriodUOMId");

                    b.ToTable("SchedulingPeriodUOM");
                });

            modelBuilder.Entity("ProDat.Web2.Models.SortField", b =>
                {
                    b.Property<int>("SortFieldId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("SortFieldDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SortFieldName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SortFieldId");

                    b.ToTable("SortField");
                });

            modelBuilder.Entity("ProDat.Web2.Models.Sp", b =>
                {
                    b.Property<int>("Spid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SPID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProjectId")
                        .HasColumnName("ProjectID")
                        .HasColumnType("int");

                    b.Property<string>("Spdesc")
                        .HasColumnName("SPdesc")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Spnum")
                        .IsRequired()
                        .HasColumnName("SPnum")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Spid");

                    b.HasIndex("ProjectId");

                    b.HasIndex("Spnum")
                        .IsUnique()
                        .HasName("U_SPnum");

                    b.ToTable("SP");
                });

            modelBuilder.Entity("ProDat.Web2.Models.SubSystem", b =>
                {
                    b.Property<int>("SubSystemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SubSystemID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("SubSystemName")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("SubSystemNum")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int>("SystemsId")
                        .HasColumnName("SystemID")
                        .HasColumnType("int");

                    b.HasKey("SubSystemId");

                    b.HasIndex("SubSystemNum")
                        .IsUnique()
                        .HasName("U_SubSystem");

                    b.HasIndex("SystemsId");

                    b.ToTable("SubSystem");
                });

            modelBuilder.Entity("ProDat.Web2.Models.SuperClass", b =>
                {
                    b.Property<int>("SuperclassID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SuperclassID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("SuperclassName")
                        .IsRequired()
                        .HasColumnName("SuperclassName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Superclassdescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("SuperclassID");

                    b.HasIndex("SuperclassID")
                        .IsUnique()
                        .HasName("U_SuperClass");

                    b.ToTable("SuperClass");
                });

            modelBuilder.Entity("ProDat.Web2.Models.SysCond", b =>
                {
                    b.Property<int>("SysCondId")
                        .HasColumnName("SysCondID")
                        .HasColumnType("int");

                    b.Property<string>("SysCondDesc")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("SysCondName")
                        .IsRequired()
                        .HasColumnName("SysCondName")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("SysCondId");

                    b.HasIndex("SysCondName")
                        .IsUnique()
                        .HasName("U_SysCond");

                    b.ToTable("SysCond");
                });

            modelBuilder.Entity("ProDat.Web2.Models.Systems", b =>
                {
                    b.Property<int>("SystemsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SystemID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("SystemName")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("SystemNum")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("SystemsId");

                    b.HasIndex("SystemNum")
                        .IsUnique()
                        .HasName("U_System");

                    b.ToTable("System");
                });

            modelBuilder.Entity("ProDat.Web2.Models.Tag", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TagID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CommClassId")
                        .HasColumnName("CommClassID")
                        .HasColumnType("int");

                    b.Property<int?>("CommZoneId")
                        .HasColumnName("CommZoneID")
                        .HasColumnType("int");

                    b.Property<int?>("CommissioningSubsystemId")
                        .HasColumnName("CommissioningSubsystemID")
                        .HasColumnType("int");

                    b.Property<int?>("ComnpanyCodeId")
                        .HasColumnType("int");

                    b.Property<int?>("CompanyCodeId")
                        .HasColumnType("int");

                    b.Property<int?>("EngClassId")
                        .HasColumnName("EngClassID")
                        .HasColumnType("int");

                    b.Property<int?>("EngDiscId")
                        .HasColumnName("EngDiscId")
                        .HasColumnType("int");

                    b.Property<int?>("EngParentID")
                        .HasColumnName("EngParentID1")
                        .HasColumnType("int");

                    b.Property<int?>("EngParentId")
                        .HasColumnName("EngParentID")
                        .HasColumnType("int");

                    b.Property<int?>("EngStatusId")
                        .HasColumnName("EngStatusID")
                        .HasColumnType("int");

                    b.Property<int?>("EnvZoneId")
                        .HasColumnType("int");

                    b.Property<int?>("EquipTypeID")
                        .HasColumnType("int");

                    b.Property<int?>("ExMethodId")
                        .HasColumnName("ExMethodID")
                        .HasColumnType("int");

                    b.Property<int?>("FlocTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("IpfId")
                        .HasColumnName("IpfID")
                        .HasColumnType("int");

                    b.Property<int?>("KeyDocId")
                        .HasColumnName("KeyDocID")
                        .HasColumnType("int");

                    b.Property<int?>("LocationID")
                        .HasColumnName("LocationID")
                        .HasColumnType("int");

                    b.Property<string>("MEXEquipList")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MEXParentEquip")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MaintCriticalityId")
                        .HasColumnName("MaintCriticalityID")
                        .HasColumnType("int");

                    b.Property<int?>("MaintEdcCodeId")
                        .HasColumnName("MaintEdcCodeId")
                        .HasColumnType("int");

                    b.Property<int?>("MaintLocationId")
                        .HasColumnName("MaintLocationID")
                        .HasColumnType("int");

                    b.Property<int?>("MaintObjectTypeId")
                        .HasColumnName("MaintObjectTypeID")
                        .HasColumnType("int");

                    b.Property<int?>("MaintParentId")
                        .HasColumnName("MaintParentID")
                        .HasColumnType("int");

                    b.Property<int?>("MaintPlannerGroupId")
                        .HasColumnName("MaintPlannerGroupID")
                        .HasColumnType("int");

                    b.Property<string>("MaintScePsJustification")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("MaintScePsReviewTeamId")
                        .HasColumnName("MaintScePsReviewTeamID")
                        .HasColumnType("int");

                    b.Property<int?>("MaintSortProcessId")
                        .HasColumnName("MaintSortProcessID")
                        .HasColumnType("int");

                    b.Property<int?>("MaintStatusId")
                        .HasColumnName("MaintStatusID")
                        .HasColumnType("int");

                    b.Property<int?>("MaintStructureIndicatorId")
                        .HasColumnName("MaintStructureIndicatorID")
                        .HasColumnType("int");

                    b.Property<int?>("MaintTypeId")
                        .HasColumnName("MaintTypeID")
                        .HasColumnType("int");

                    b.Property<int?>("MaintWorkCentreId")
                        .HasColumnName("MaintWorkCentreID")
                        .HasColumnType("int");

                    b.Property<int?>("MaintenancePlantId")
                        .HasColumnType("int");

                    b.Property<int?>("MaintenanceplanId")
                        .HasColumnName("MaintenanceplanID")
                        .HasColumnType("int");

                    b.Property<int?>("ManufacturerId")
                        .HasColumnName("ManufacturerID")
                        .HasColumnType("int");

                    b.Property<string>("ModelDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ModelId")
                        .HasColumnName("ModelID")
                        .HasColumnType("int");

                    b.Property<int?>("PbsId")
                        .HasColumnType("int");

                    b.Property<int?>("PerformanceStandardId")
                        .HasColumnName("PerformanceStandardID")
                        .HasColumnType("int");

                    b.Property<int?>("PlannerPlantId")
                        .HasColumnType("int");

                    b.Property<int?>("PlannerPlantdId")
                        .HasColumnType("int");

                    b.Property<int?>("PoId")
                        .HasColumnName("PoID")
                        .HasColumnType("int");

                    b.Property<bool>("RTF")
                        .HasColumnType("bit");

                    b.Property<int?>("RbiSilId")
                        .HasColumnName("RbiSilID")
                        .HasColumnType("int");

                    b.Property<int?>("RbmId")
                        .HasColumnName("RbmID")
                        .HasColumnType("int");

                    b.Property<int?>("RcmId")
                        .HasColumnName("RcmID")
                        .HasColumnType("int");

                    b.Property<int?>("SAPStatusId")
                        .HasColumnType("int");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SortFieldId")
                        .HasColumnType("int");

                    b.Property<int?>("SubSystemId")
                        .HasColumnName("SubSystemID")
                        .HasColumnType("int");

                    b.Property<string>("SupFunctLoc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TagBomReq")
                        .HasColumnType("nvarchar(4)")
                        .HasMaxLength(4);

                    b.Property<string>("TagCharDesc")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("TagCharValue")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("TagCharacteristic")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("TagComment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TagDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("TagFloc")
                        .HasColumnName("TagFLOC")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("TagFlocDesc")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("TagMaintCritComments")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("TagMaintQuery")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("TagNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("TagRawDesc")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("TagRawNumber")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("TagRbmMethod")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("TagService")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("TagSource")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("TagSpNo")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("TagSrcKeyList")
                        .HasColumnType("nvarchar(40)")
                        .HasMaxLength(40);

                    b.Property<string>("TagVendorTag")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("TagVib")
                        .HasColumnType("nvarchar(5)")
                        .HasMaxLength(5);

                    b.Property<bool>("Tagnoneng")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("VibId")
                        .HasColumnName("VibID")
                        .HasColumnType("int");

                    b.Property<int?>("WBSElementId")
                        .HasColumnType("int");

                    b.HasKey("TagId");

                    b.HasIndex("CommClassId");

                    b.HasIndex("CommZoneId");

                    b.HasIndex("CommissioningSubsystemId");

                    b.HasIndex("CompanyCodeId");

                    b.HasIndex("EngClassId");

                    b.HasIndex("EngDiscId");

                    b.HasIndex("EngParentId");

                    b.HasIndex("EngStatusId");

                    b.HasIndex("EnvZoneId");

                    b.HasIndex("EquipTypeID");

                    b.HasIndex("ExMethodId");

                    b.HasIndex("FlocTypeId");

                    b.HasIndex("IpfId");

                    b.HasIndex("KeyDocId");

                    b.HasIndex("LocationID");

                    b.HasIndex("MaintCriticalityId");

                    b.HasIndex("MaintEdcCodeId");

                    b.HasIndex("MaintLocationId");

                    b.HasIndex("MaintObjectTypeId");

                    b.HasIndex("MaintParentId");

                    b.HasIndex("MaintPlannerGroupId");

                    b.HasIndex("MaintScePsReviewTeamId");

                    b.HasIndex("MaintSortProcessId");

                    b.HasIndex("MaintStatusId");

                    b.HasIndex("MaintStructureIndicatorId");

                    b.HasIndex("MaintTypeId");

                    b.HasIndex("MaintWorkCentreId");

                    b.HasIndex("MaintenancePlantId");

                    b.HasIndex("MaintenanceplanId");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("ModelId");

                    b.HasIndex("PbsId");

                    b.HasIndex("PerformanceStandardId");

                    b.HasIndex("PlannerPlantId");

                    b.HasIndex("RbiSilId");

                    b.HasIndex("RbmId");

                    b.HasIndex("RcmId");

                    b.HasIndex("SAPStatusId");

                    b.HasIndex("SortFieldId");

                    b.HasIndex("SubSystemId");

                    b.HasIndex("TagFloc")
                        .IsUnique()
                        .HasName("U_NoNull_TagFLOC")
                        .HasFilter("([TagFLOC] IS NOT NULL)");

                    b.HasIndex("TagNumber")
                        .IsUnique()
                        .HasName("IX_Tag");

                    b.HasIndex("VibId");

                    b.HasIndex("WBSElementId");

                    b.ToTable("Tag");
                });

            modelBuilder.Entity("ProDat.Web2.Models.TagEngData", b =>
                {
                    b.Property<int>("TagId")
                        .HasColumnName("TagID")
                        .HasColumnType("int");

                    b.Property<int>("EngDataCodeId")
                        .HasColumnName("EngDataCodeID")
                        .HasColumnType("int");

                    b.Property<string>("EngDataComment")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("EngDatasource")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("EngDatavalue")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("TagId", "EngDataCodeId");

                    b.HasIndex("EngDataCodeId");

                    b.ToTable("TagEngData");
                });

            modelBuilder.Entity("ProDat.Web2.Models.TagPo", b =>
                {
                    b.Property<int>("TagId")
                        .HasColumnName("TagID")
                        .HasColumnType("int");

                    b.Property<int>("Poid")
                        .HasColumnName("POID")
                        .HasColumnType("int");

                    b.HasKey("TagId", "Poid");

                    b.HasIndex("Poid");

                    b.ToTable("TagPO");
                });

            modelBuilder.Entity("ProDat.Web2.Models.TagView", b =>
                {
                    b.Property<int>("TagViewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("TagViewName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TagViewId");

                    b.ToTable("TagView");
                });

            modelBuilder.Entity("ProDat.Web2.Models.TagViewColumns", b =>
                {
                    b.Property<int>("TagViewColumnsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ColumnName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ColumnWidth")
                        .HasColumnType("int");

                    b.Property<int>("TagViewId")
                        .HasColumnType("int");

                    b.Property<int>("TagViewOrder")
                        .HasColumnType("int");

                    b.Property<string>("starField")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TagViewColumnsId");

                    b.HasIndex("TagViewId");

                    b.ToTable("TagViewColumns");
                });

            modelBuilder.Entity("ProDat.Web2.Models.TagViewColumnsUser", b =>
                {
                    b.Property<int>("TagViewColumnsUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ColumnWidth")
                        .HasColumnType("int");

                    b.Property<int>("TagViewColumnsId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TagViewColumnsUserId");

                    b.HasIndex("TagViewColumnsId");

                    b.ToTable("TagViewColumnsUser");
                });

            modelBuilder.Entity("ProDat.Web2.Models.TagXdoc", b =>
                {
                    b.Property<int>("TagId")
                        .HasColumnName("TagID")
                        .HasColumnType("int");

                    b.Property<int>("DocId")
                        .HasColumnName("DocID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime");

                    b.Property<string>("XComment")
                        .HasColumnName("xComment")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("TagId", "DocId");

                    b.HasIndex("DocId");

                    b.ToTable("TagXDoc");
                });

            modelBuilder.Entity("ProDat.Web2.Models.TaskListCat", b =>
                {
                    b.Property<int>("TaskListCatId")
                        .HasColumnName("TaskListCatID")
                        .HasColumnType("int");

                    b.Property<string>("TaskListCatDesc")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("TaskListCatName")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("TaskListCatId");

                    b.HasIndex("TaskListCatName")
                        .IsUnique()
                        .HasName("U_TaskListCat");

                    b.ToTable("TaskListCat");
                });

            modelBuilder.Entity("ProDat.Web2.Models.TaskListGroup", b =>
                {
                    b.Property<int>("TaskListGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TaskListGroupID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TaskListGroupDesc")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("TaskListGroupName")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("TaskListGroupId");

                    b.HasIndex("TaskListGroupName")
                        .IsUnique()
                        .HasName("U_TaskListGroup");

                    b.ToTable("TaskListGroup");
                });

            modelBuilder.Entity("ProDat.Web2.Models.TaskListHeader", b =>
                {
                    b.Property<int>("TaskListHeaderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ChangeRequired")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int>("Counter")
                        .HasColumnType("int");

                    b.Property<int?>("MaintPackageId")
                        .HasColumnName("MaintPackageID")
                        .HasColumnType("int");

                    b.Property<int?>("MaintPlannerGroupId")
                        .HasColumnType("int");

                    b.Property<int?>("MaintStrategyId")
                        .HasColumnName("MaintStrategyID")
                        .HasColumnType("int");

                    b.Property<int?>("MaintWorkCentreId")
                        .HasColumnName("MaintWorkCentreID")
                        .HasColumnType("int");

                    b.Property<int?>("MaintenancePlantId")
                        .HasColumnName("MaintenancePlantID")
                        .HasColumnType("int");

                    b.Property<string>("PerfStdAppDel")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("PerformanceStandardId")
                        .HasColumnName("PerformanceStandardID")
                        .HasColumnType("int");

                    b.Property<int?>("PmassemblyId")
                        .HasColumnName("PMAssemblyID")
                        .HasColumnType("int");

                    b.Property<string>("RegBodyAppDel")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("RegulatoryBodyId")
                        .HasColumnName("RegulatoryBodyID")
                        .HasColumnType("int");

                    b.Property<int?>("ScePsReviewId")
                        .HasColumnName("ScePsReviewID")
                        .HasColumnType("int");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int");

                    b.Property<int?>("SysCondId")
                        .HasColumnName("SysCondID")
                        .HasColumnType("int");

                    b.Property<int?>("TaskListClassId")
                        .HasColumnName("TaskListClassID")
                        .HasColumnType("int");

                    b.Property<int>("TaskListGroupId")
                        .HasColumnName("TaskListGroupID")
                        .HasColumnType("int");

                    b.Property<string>("TaskListShortText")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("TasklistCatId")
                        .HasColumnName("TasklistCatID")
                        .HasColumnType("int");

                    b.HasKey("TaskListHeaderId");

                    b.HasIndex("MaintPackageId");

                    b.HasIndex("MaintPlannerGroupId");

                    b.HasIndex("MaintStrategyId");

                    b.HasIndex("MaintWorkCentreId");

                    b.HasIndex("MaintenancePlantId");

                    b.HasIndex("PerformanceStandardId");

                    b.HasIndex("PmassemblyId");

                    b.HasIndex("RegulatoryBodyId");

                    b.HasIndex("StatusId");

                    b.HasIndex("SysCondId");

                    b.HasIndex("TaskListGroupId");

                    b.HasIndex("TaskListShortText")
                        .IsUnique()
                        .HasName("U_TaskListHeader");

                    b.HasIndex("TasklistCatId");

                    b.ToTable("TaskListHeader");
                });

            modelBuilder.Entity("ProDat.Web2.Models.TaskListOperations", b =>
                {
                    b.Property<int>("TaskListOperationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TaskListOPerationID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CapNo")
                        .HasColumnType("int");

                    b.Property<string>("ChangeRequired")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ControlKeyId")
                        .HasColumnName("ControlKeyID")
                        .HasColumnType("int");

                    b.Property<int?>("DocId")
                        .HasColumnName("DocID")
                        .HasColumnType("int");

                    b.Property<int?>("FixedOperQty")
                        .HasColumnType("int");

                    b.Property<int?>("MaintPackageId")
                        .HasColumnName("MaintPackageID")
                        .HasColumnType("int");

                    b.Property<int?>("MaintWorkCentreId")
                        .HasColumnName("MaintWorkCentreID")
                        .HasColumnType("int");

                    b.Property<int?>("MaintenancePlantId")
                        .HasColumnName("MaintenancePlantID")
                        .HasColumnType("int");

                    b.Property<bool>("OffSite")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Offsite")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("OperationDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OperationId")
                        .HasColumnName("OperationID")
                        .HasColumnType("int");

                    b.Property<string>("OperationLongText")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int>("OperationNum")
                        .HasColumnType("int");

                    b.Property<string>("OperationShortText")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("RelationshiptoOperationId")
                        .HasColumnName("RelationshiptoOperationID")
                        .HasColumnType("int");

                    b.Property<int>("SubOperationNum")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SubOperationNum")
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int?>("SysCondId")
                        .HasColumnName("SysCondID")
                        .HasColumnType("int");

                    b.Property<int?>("TaskListHeaderId")
                        .HasColumnName("TaskListHeaderID")
                        .HasColumnType("int");

                    b.Property<bool>("Ti")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TI")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("WorkHrs")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("TaskListOperationId");

                    b.HasIndex("ControlKeyId");

                    b.HasIndex("DocId");

                    b.HasIndex("MaintPackageId");

                    b.HasIndex("MaintWorkCentreId");

                    b.HasIndex("MaintenancePlantId");

                    b.HasIndex("OperationId");

                    b.HasIndex("RelationshiptoOperationId");

                    b.HasIndex("SysCondId");

                    b.HasIndex("TaskListHeaderId");

                    b.ToTable("TaskListOperations");
                });

            modelBuilder.Entity("ProDat.Web2.Models.TaskListXscePsreview", b =>
                {
                    b.Property<int>("ScePsreviewId")
                        .HasColumnName("ScePSReviewID")
                        .HasColumnType("int");

                    b.Property<int>("TaskListHeaderId")
                        .HasColumnName("TaskListHeaderID")
                        .HasColumnType("int");

                    b.HasKey("ScePsreviewId", "TaskListHeaderId");

                    b.HasIndex("TaskListHeaderId");

                    b.ToTable("TaskListXScePSReview");
                });

            modelBuilder.Entity("ProDat.Web2.Models.UC2ViewColumns", b =>
                {
                    b.Property<int>("UC2ViewColumnsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("height")
                        .HasColumnType("int");

                    b.Property<string>("sectionName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("sectionOrder")
                        .HasColumnType("int");

                    b.Property<int>("width")
                        .HasColumnType("int");

                    b.HasKey("UC2ViewColumnsId");

                    b.ToTable("UC2ViewColumns");
                });

            modelBuilder.Entity("ProDat.Web2.Models.UC2ViewColumnsUser", b =>
                {
                    b.Property<int>("UC2ViewColumnsUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("UC2ViewColumnsId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("height")
                        .HasColumnType("int");

                    b.Property<int>("width")
                        .HasColumnType("int");

                    b.HasKey("UC2ViewColumnsUserId");

                    b.HasIndex("UC2ViewColumnsId");

                    b.ToTable("UC2ViewColumnsUser");
                });

            modelBuilder.Entity("ProDat.Web2.Models.Vib", b =>
                {
                    b.Property<int>("VibId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("VibID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("VibDesc")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("VibName")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("VibId");

                    b.HasIndex("VibName")
                        .IsUnique()
                        .HasName("U_Vib");

                    b.ToTable("Vib");
                });

            modelBuilder.Entity("ProDat.Web2.Models.WBSElement", b =>
                {
                    b.Property<int>("WBSElementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("WBSElementDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WBSElementName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WBSElementId");

                    b.ToTable("WBSElement");
                });

            modelBuilder.Entity("ProDat.Web2.Models.Area", b =>
                {
                    b.HasOne("ProDat.Web2.Models.MaintenancePlant", "MaintenancePlant")
                        .WithMany("Areas")
                        .HasForeignKey("MaintenancePlantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProDat.Web2.Models.CommSubSystem", b =>
                {
                    b.HasOne("ProDat.Web2.Models.Sp", "Sp")
                        .WithMany("CommSubSystems")
                        .HasForeignKey("Spid")
                        .HasConstraintName("FK_CommSubSystem_SP");

                    b.HasOne("ProDat.Web2.Models.Systems", "Systems")
                        .WithMany("CommSubSystems")
                        .HasForeignKey("SystemId")
                        .HasConstraintName("FK_CommSubSystem_System")
                        .IsRequired();
                });

            modelBuilder.Entity("ProDat.Web2.Models.CommZone", b =>
                {
                    b.HasOne("ProDat.Web2.Models.Project", "Project")
                        .WithMany("CommZones")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK_CommZone_Project")
                        .IsRequired();
                });

            modelBuilder.Entity("ProDat.Web2.Models.Doc", b =>
                {
                    b.HasOne("ProDat.Web2.Models.DocType", "DocType")
                        .WithMany("Docs")
                        .HasForeignKey("DocTypeId")
                        .HasConstraintName("FK_Doc_DocType");
                });

            modelBuilder.Entity("ProDat.Web2.Models.DocType", b =>
                {
                    b.HasOne("ProDat.Web2.Models.EngDisc", "EngDisc")
                        .WithMany("DocTypes")
                        .HasForeignKey("EngDiscId");
                });

            modelBuilder.Entity("ProDat.Web2.Models.ETL.Import", b =>
                {
                    b.HasOne("ProDat.Web2.Models.ETL.ImportType", "ImportType")
                        .WithMany()
                        .HasForeignKey("ImportTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProDat.Web2.Models.ETL.ImportError", b =>
                {
                    b.HasOne("ProDat.Web2.Models.ETL.ImportExtract", "ImportExtract")
                        .WithOne("ImportError")
                        .HasForeignKey("ProDat.Web2.Models.ETL.ImportError", "ImportExtractId");

                    b.HasOne("ProDat.Web2.Models.ETL.Import", "Import")
                        .WithMany()
                        .HasForeignKey("ImportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProDat.Web2.Models.ETL.ImportTransform", "ImportTransform")
                        .WithMany()
                        .HasForeignKey("ImportTransformId");
                });

            modelBuilder.Entity("ProDat.Web2.Models.ETL.ImportExtract", b =>
                {
                    b.HasOne("ProDat.Web2.Models.ETL.Import", "Import")
                        .WithMany()
                        .HasForeignKey("ImportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProDat.Web2.Models.ETL.ImportTransform", b =>
                {
                    b.HasOne("ProDat.Web2.Models.ETL.Import", "Import")
                        .WithMany()
                        .HasForeignKey("ImportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProDat.Web2.Models.EngClass", b =>
                {
                    b.HasOne("ProDat.Web2.Models.SuperClass", "SuperClass")
                        .WithMany()
                        .HasForeignKey("SuperClassID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProDat.Web2.Models.EngClassRequiredDocs", b =>
                {
                    b.HasOne("ProDat.Web2.Models.DocType", "DocType")
                        .WithMany("EngClassRequiredDocs")
                        .HasForeignKey("DocTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProDat.Web2.Models.EngClass", "EngClass")
                        .WithOne("EngClassRequiredDocs")
                        .HasForeignKey("ProDat.Web2.Models.EngClassRequiredDocs", "EngClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProDat.Web2.Models.EngDataClassxEngDataCode", b =>
                {
                    b.HasOne("ProDat.Web2.Models.BccCode", "BccCode")
                        .WithMany("EngDataClasses")
                        .HasForeignKey("BccCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProDat.Web2.Models.EngClass", "EngClass")
                        .WithMany("EngDataClassxEngDataCodes")
                        .HasForeignKey("EngClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProDat.Web2.Models.EngDataCode", "EngDataCode")
                        .WithMany("EngDataClassxEngDataCodes")
                        .HasForeignKey("EngDataCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProDat.Web2.Models.EngDataCode", b =>
                {
                    b.HasOne("ProDat.Web2.Models.EngDataClass", "EngDataClasss")
                        .WithMany("EngDataCodes")
                        .HasForeignKey("EngDataClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProDat.Web2.Models.EngDataCodeDropDown", b =>
                {
                    b.HasOne("ProDat.Web2.Models.EngDataCode", "EngDataCode")
                        .WithMany("TagEngDataCodeDropdowns")
                        .HasForeignKey("EngDataCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProDat.Web2.Models.FlocXmaintItem", b =>
                {
                    b.HasOne("ProDat.Web2.Models.Tag", "Floc")
                        .WithMany("FlocXmaintItems")
                        .HasForeignKey("FlocId")
                        .HasConstraintName("fk_FlocXMaintItem_Tag")
                        .IsRequired();

                    b.HasOne("ProDat.Web2.Models.MaintItem", "MaintItem")
                        .WithMany("FlocXmaintItems")
                        .HasForeignKey("MaintItemId")
                        .HasConstraintName("fk_FlocXMaintItem_MaintItem")
                        .IsRequired();
                });

            modelBuilder.Entity("ProDat.Web2.Models.FlocXmaintLoad", b =>
                {
                    b.HasOne("ProDat.Web2.Models.MaintLoad", "MaintLoad")
                        .WithMany("FlocXmaintLoads")
                        .HasForeignKey("MaintLoadId")
                        .HasConstraintName("FK_FlocXMaintLoad_MaintLoad")
                        .IsRequired();

                    b.HasOne("ProDat.Web2.Models.Tag", "Tag")
                        .WithMany("FlocXmaintLoads")
                        .HasForeignKey("TagId")
                        .HasConstraintName("FK_FlocXMaintLoad_Floc")
                        .IsRequired();
                });

            modelBuilder.Entity("ProDat.Web2.Models.FlocXmaintQuery", b =>
                {
                    b.HasOne("ProDat.Web2.Models.Tag", "Floc")
                        .WithMany("FlocXmaintQuerys")
                        .HasForeignKey("FlocId")
                        .HasConstraintName("FK_FlocXMaintQuery_Floc")
                        .IsRequired();

                    b.HasOne("ProDat.Web2.Models.MaintQuery", "MaintQuery")
                        .WithMany("FlocXmaintQuerys")
                        .HasForeignKey("MaintQueryId")
                        .HasConstraintName("FK_FlocXMaintQuery_MaintQuery")
                        .IsRequired();
                });

            modelBuilder.Entity("ProDat.Web2.Models.FlocXpmassembly", b =>
                {
                    b.HasOne("ProDat.Web2.Models.Pmassembly", "Pmassembly")
                        .WithMany("FlocXpmassemblys")
                        .HasForeignKey("PmassemblyId")
                        .HasConstraintName("FK_FlocXPMAssembly_PMAssembly")
                        .IsRequired();

                    b.HasOne("ProDat.Web2.Models.Tag", "Tag")
                        .WithMany("FlocXpmassemblys")
                        .HasForeignKey("TagId")
                        .HasConstraintName("FK_FlocXPMAssembly_Tag")
                        .IsRequired();
                });

            modelBuilder.Entity("ProDat.Web2.Models.KeyListxEngClass", b =>
                {
                    b.HasOne("ProDat.Web2.Models.EngClass", "EngClass")
                        .WithMany("KeyListxEngClass")
                        .HasForeignKey("EngClassID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProDat.Web2.Models.KeyList", "KeyList")
                        .WithMany("KeyListxEngClasses")
                        .HasForeignKey("KeyListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProDat.Web2.Models.KeyListxEngDataCode", b =>
                {
                    b.HasOne("ProDat.Web2.Models.EngDataCode", "EngDataCodes")
                        .WithMany("KeyListxEngDataCodes")
                        .HasForeignKey("EngDataCodesEngDataCodeId");

                    b.HasOne("ProDat.Web2.Models.KeyList", "KeyList")
                        .WithMany("KeyListxEngDataCodes")
                        .HasForeignKey("KeyListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProDat.Web2.Models.Location", b =>
                {
                    b.HasOne("ProDat.Web2.Models.Area", "Area")
                        .WithMany("Locations")
                        .HasForeignKey("AreaId")
                        .HasConstraintName("FK_Location_Area")
                        .IsRequired();

                    b.HasOne("ProDat.Web2.Models.Location", "ParentLocation")
                        .WithMany()
                        .HasForeignKey("ParentLocationID");
                });

            modelBuilder.Entity("ProDat.Web2.Models.LocationTypes", b =>
                {
                    b.HasOne("ProDat.Web2.Models.LocationTypes", "Locations")
                        .WithMany()
                        .HasForeignKey("LocationsLocationTypesId");
                });

            modelBuilder.Entity("ProDat.Web2.Models.MaintArea", b =>
                {
                    b.HasOne("ProDat.Web2.Models.PlantSection", "PlantSection")
                        .WithMany("MaintAreas")
                        .HasForeignKey("PlantSectionId")
                        .HasConstraintName("FK_MaintArea_PlantSection");
                });

            modelBuilder.Entity("ProDat.Web2.Models.MaintClassXEngDataCode", b =>
                {
                    b.HasOne("ProDat.Web2.Models.EngDataCode", "EngDataCode")
                        .WithMany("MaintClassXEngDataCode")
                        .HasForeignKey("EngDataCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProDat.Web2.Models.MaintClass", "MaintClass")
                        .WithMany("MaintClassXEngDataCode")
                        .HasForeignKey("MaintClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProDat.Web2.Models.MaintItem", b =>
                {
                    b.HasOne("ProDat.Web2.Models.Tag", "HeaderFloc")
                        .WithMany()
                        .HasForeignKey("HeaderFlocId");

                    b.HasOne("ProDat.Web2.Models.MaintPlan", "MaintPlan")
                        .WithMany()
                        .HasForeignKey("MaintPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProDat.Web2.Models.MaintPlannerGroup", "MaintPlannerGroup")
                        .WithMany()
                        .HasForeignKey("MaintPlannerGroupId");

                    b.HasOne("ProDat.Web2.Models.MaintWorkCentre", "MaintWorkCentre")
                        .WithMany()
                        .HasForeignKey("MaintWorkCentreId");

                    b.HasOne("ProDat.Web2.Models.MaintenancePlant", "MaintenancePlant")
                        .WithMany()
                        .HasForeignKey("MaintenancePlantId");

                    b.HasOne("ProDat.Web2.Models.Priority", "Priority")
                        .WithMany()
                        .HasForeignKey("PriorityId");

                    b.HasOne("ProDat.Web2.Models.SysCond", "SysCond")
                        .WithMany()
                        .HasForeignKey("SysCondId");
                });

            modelBuilder.Entity("ProDat.Web2.Models.MaintItemXmaintTaskListHeader", b =>
                {
                    b.HasOne("ProDat.Web2.Models.MaintItem", "MaintItem")
                        .WithMany("MaintItemXmaintTaskListHeaders")
                        .HasForeignKey("MaintItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProDat.Web2.Models.TaskListHeader", "TaskListHeader")
                        .WithMany("MaintItemXmaintTaskListHeaders")
                        .HasForeignKey("TaskListHeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProDat.Web2.Models.MaintLoad", b =>
                {
                    b.HasOne("ProDat.Web2.Models.LoadTemplate", "LoadTemplate")
                        .WithMany("MaintLoads")
                        .HasForeignKey("LoadTemplateId")
                        .HasConstraintName("FK_MaintLoad_LoadTemplate")
                        .IsRequired();
                });

            modelBuilder.Entity("ProDat.Web2.Models.MaintLocation", b =>
                {
                    b.HasOne("ProDat.Web2.Models.MaintArea", "MaintArea")
                        .WithMany("MaintLocations")
                        .HasForeignKey("MaintAreaId")
                        .HasConstraintName("FK_MaintLocation_MaintArea");
                });

            modelBuilder.Entity("ProDat.Web2.Models.MaintObjectTypeXMaintClass", b =>
                {
                    b.HasOne("ProDat.Web2.Models.MaintClass", "MaintClass")
                        .WithMany("MaintObjectTypeXMaintClass")
                        .HasForeignKey("MaintClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProDat.Web2.Models.MaintObjectType", "MaintObjectType")
                        .WithMany("MaintObjectTypeXMaintClass")
                        .HasForeignKey("MaintObjectTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProDat.Web2.Models.MaintPlan", b =>
                {
                    b.HasOne("ProDat.Web2.Models.MaintSortProcess", "MaintSortProcess")
                        .WithMany("MaintPlans")
                        .HasForeignKey("MaintSortProcessId")
                        .HasConstraintName("FK_MaintPlan_MaintSortProcess")
                        .IsRequired();

                    b.HasOne("ProDat.Web2.Models.MaintStrategy", "MaintStrategy")
                        .WithMany("MaintPlans")
                        .HasForeignKey("MaintStrategyId")
                        .HasConstraintName("FK_MaintPlan_MaintStrategy");

                    b.HasOne("ProDat.Web2.Models.MeasPoint", "MeasPoint")
                        .WithMany("MaintPlans")
                        .HasForeignKey("MeasPointId")
                        .HasConstraintName("FK_MaintPlan_MeasPoint");
                });

            modelBuilder.Entity("ProDat.Web2.Models.MaintQuery", b =>
                {
                    b.HasOne("ProDat.Web2.Models.MaintQueryNote", "MaintQueryNote")
                        .WithMany("MaintQuerys")
                        .HasForeignKey("MaintQueryNoteId")
                        .HasConstraintName("FK_MaintQuery_MaintQueryNote");
                });

            modelBuilder.Entity("ProDat.Web2.Models.MaintStrategy", b =>
                {
                    b.HasOne("ProDat.Web2.Models.Doc", "Doc")
                        .WithMany("MaintStrategys")
                        .HasForeignKey("DocId")
                        .HasConstraintName("FK_MaintStrategy_Doc")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProDat.Web2.Models.Model", b =>
                {
                    b.HasOne("ProDat.Web2.Models.Manufacturer", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("ManufacturerId");
                });

            modelBuilder.Entity("ProDat.Web2.Models.Project", b =>
                {
                    b.HasOne("ProDat.Web2.Models.MaintenancePlant", "MaintenancePlant")
                        .WithMany("Projects")
                        .HasForeignKey("MaintenancePlantId")
                        .HasConstraintName("FK_Project_MaintenancePlant")
                        .IsRequired();
                });

            modelBuilder.Entity("ProDat.Web2.Models.RelationshipToOperation", b =>
                {
                    b.HasOne("ProDat.Web2.Models.RelationshipType", "RelationshipType")
                        .WithMany("RelationshipToOperations")
                        .HasForeignKey("RelationshipTypeId")
                        .HasConstraintName("FK_RelationshipToOperation_RelationshipType");
                });

            modelBuilder.Entity("ProDat.Web2.Models.SAPRequirements.EntityAttributeRequirement", b =>
                {
                    b.HasOne("ProDat.Web2.Models.SAPRequirements.EntityAttribute", "EntityAttribute")
                        .WithMany("EntityAttributeRequirements")
                        .HasForeignKey("EntityAttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProDat.Web2.Models.Sp", b =>
                {
                    b.HasOne("ProDat.Web2.Models.Project", "Project")
                        .WithMany("Sps")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK_SP_Project")
                        .IsRequired();
                });

            modelBuilder.Entity("ProDat.Web2.Models.SubSystem", b =>
                {
                    b.HasOne("ProDat.Web2.Models.Systems", "Systems")
                        .WithMany("SubSystems")
                        .HasForeignKey("SystemsId")
                        .HasConstraintName("FK_SubSystem_System")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProDat.Web2.Models.Tag", b =>
                {
                    b.HasOne("ProDat.Web2.Models.CommClass", "CommClass")
                        .WithMany("Tags")
                        .HasForeignKey("CommClassId")
                        .HasConstraintName("FK_Tag_CommClass");

                    b.HasOne("ProDat.Web2.Models.CommZone", "CommZone")
                        .WithMany("Tags")
                        .HasForeignKey("CommZoneId")
                        .HasConstraintName("FK_Tag_CommZone");

                    b.HasOne("ProDat.Web2.Models.CommSubSystem", "CommissioningSubsystem")
                        .WithMany("Tags")
                        .HasForeignKey("CommissioningSubsystemId")
                        .HasConstraintName("FK_Tag_CommSubSystem");

                    b.HasOne("ProDat.Web2.Models.CompanyCode", "CompanyCode")
                        .WithMany("Tags")
                        .HasForeignKey("CompanyCodeId");

                    b.HasOne("ProDat.Web2.Models.EngClass", "EngClass")
                        .WithMany("Tags")
                        .HasForeignKey("EngClassId")
                        .HasConstraintName("FK_Tag_EngClass");

                    b.HasOne("ProDat.Web2.Models.EngDisc", "EngDisc")
                        .WithMany("Tags")
                        .HasForeignKey("EngDiscId")
                        .HasConstraintName("FK_Tag_EngDisc");

                    b.HasOne("ProDat.Web2.Models.Tag", "EngParent")
                        .WithMany("InverseEngParents")
                        .HasForeignKey("EngParentId")
                        .HasConstraintName("FK_Tag_EngParent");

                    b.HasOne("ProDat.Web2.Models.EngStatus", "EngStatus")
                        .WithMany("Tags")
                        .HasForeignKey("EngStatusId")
                        .HasConstraintName("FK_Tag_EngStatus");

                    b.HasOne("ProDat.Web2.Models.EnvZone", "EnvZone")
                        .WithMany()
                        .HasForeignKey("EnvZoneId");

                    b.HasOne("ProDat.Web2.Models.EquipmentTypes", "EquipmentType")
                        .WithMany()
                        .HasForeignKey("EquipTypeID");

                    b.HasOne("ProDat.Web2.Models.ExMethod", "ExMethod")
                        .WithMany("Tags")
                        .HasForeignKey("ExMethodId")
                        .HasConstraintName("FK_Tag_ExMethod");

                    b.HasOne("ProDat.Web2.Models.FlocType", "FlocType")
                        .WithMany("Tags")
                        .HasForeignKey("FlocTypeId");

                    b.HasOne("ProDat.Web2.Models.Ipf", "Ipf")
                        .WithMany("Tags")
                        .HasForeignKey("IpfId")
                        .HasConstraintName("FK_Tag_Ipf");

                    b.HasOne("ProDat.Web2.Models.Doc", "KeyDoc")
                        .WithMany("Tags")
                        .HasForeignKey("KeyDocId")
                        .HasConstraintName("FK_Tag_Doc");

                    b.HasOne("ProDat.Web2.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationID");

                    b.HasOne("ProDat.Web2.Models.MaintCriticality", "MaintCriticality")
                        .WithMany("Tags")
                        .HasForeignKey("MaintCriticalityId")
                        .HasConstraintName("FK_Tag_MaintCriticality");

                    b.HasOne("ProDat.Web2.Models.MaintEdcCode", "MaintEdcCode")
                        .WithMany("Tags")
                        .HasForeignKey("MaintEdcCodeId")
                        .HasConstraintName("FK_Tag_MaintEdcCode");

                    b.HasOne("ProDat.Web2.Models.MaintLocation", "MaintLocation")
                        .WithMany("Tags")
                        .HasForeignKey("MaintLocationId")
                        .HasConstraintName("FK_Tag_MaintLocation");

                    b.HasOne("ProDat.Web2.Models.MaintObjectType", "MaintObjectType")
                        .WithMany("Tags")
                        .HasForeignKey("MaintObjectTypeId")
                        .HasConstraintName("FK_Tag_MaintObjectType");

                    b.HasOne("ProDat.Web2.Models.Tag", "MaintParent")
                        .WithMany("InverseMaintParents")
                        .HasForeignKey("MaintParentId")
                        .HasConstraintName("FK_Tag_MaintParent");

                    b.HasOne("ProDat.Web2.Models.MaintPlannerGroup", "MaintPlannerGroup")
                        .WithMany("Tags")
                        .HasForeignKey("MaintPlannerGroupId")
                        .HasConstraintName("FK_Tag_MaintPlannerGroup");

                    b.HasOne("ProDat.Web2.Models.MaintScePsReviewTeam", "MaintScePsReviewTeam")
                        .WithMany("Tags")
                        .HasForeignKey("MaintScePsReviewTeamId")
                        .HasConstraintName("FK_Tag_MaintScePsReviewTeam");

                    b.HasOne("ProDat.Web2.Models.MaintSortProcess", "MaintSortProcess")
                        .WithMany("Tags")
                        .HasForeignKey("MaintSortProcessId")
                        .HasConstraintName("FK_Tag_MaintSortProcess");

                    b.HasOne("ProDat.Web2.Models.MaintStatus", "MaintStatus")
                        .WithMany("Tags")
                        .HasForeignKey("MaintStatusId");

                    b.HasOne("ProDat.Web2.Models.MaintStructureIndicator", "MaintStructureIndicator")
                        .WithMany("Tags")
                        .HasForeignKey("MaintStructureIndicatorId")
                        .HasConstraintName("FK_Tag_MaintStructIndicator");

                    b.HasOne("ProDat.Web2.Models.MaintType", "MaintType")
                        .WithMany("Tags")
                        .HasForeignKey("MaintTypeId")
                        .HasConstraintName("FK_Tag_MaintType");

                    b.HasOne("ProDat.Web2.Models.MaintWorkCentre", "MaintWorkCentre")
                        .WithMany("Tags")
                        .HasForeignKey("MaintWorkCentreId")
                        .HasConstraintName("FK_Tag_MaintWorkCentre");

                    b.HasOne("ProDat.Web2.Models.MaintenancePlant", "MaintenancePlant")
                        .WithMany()
                        .HasForeignKey("MaintenancePlantId");

                    b.HasOne("ProDat.Web2.Models.MaintPlan", "Maintenanceplan")
                        .WithMany("Tags")
                        .HasForeignKey("MaintenanceplanId")
                        .HasConstraintName("FK_Tag_MaintPlan");

                    b.HasOne("ProDat.Web2.Models.Manufacturer", "Manufacturer")
                        .WithMany("Tags")
                        .HasForeignKey("ManufacturerId")
                        .HasConstraintName("FK_Tag_Manufacturer");

                    b.HasOne("ProDat.Web2.Models.Model", "Model")
                        .WithMany("Tags")
                        .HasForeignKey("ModelId")
                        .HasConstraintName("FK_Tag_Model");

                    b.HasOne("ProDat.Web2.Models.Pbs", "Pbs")
                        .WithMany()
                        .HasForeignKey("PbsId");

                    b.HasOne("ProDat.Web2.Models.PerformanceStandard", "PerformanceStandard")
                        .WithMany("Tags")
                        .HasForeignKey("PerformanceStandardId")
                        .HasConstraintName("FK_Tag_PerformanceStandard");

                    b.HasOne("ProDat.Web2.Models.PlannerPlant", "PlannerPlant")
                        .WithMany("Tags")
                        .HasForeignKey("PlannerPlantId");

                    b.HasOne("ProDat.Web2.Models.RbiSil", "RbiSil")
                        .WithMany("Tags")
                        .HasForeignKey("RbiSilId")
                        .HasConstraintName("FK_Tag_RbiSil");

                    b.HasOne("ProDat.Web2.Models.Rbm", "Rbm")
                        .WithMany("Tags")
                        .HasForeignKey("RbmId")
                        .HasConstraintName("FK_Tag_Rbm");

                    b.HasOne("ProDat.Web2.Models.Rcm", "Rcm")
                        .WithMany("Tags")
                        .HasForeignKey("RcmId")
                        .HasConstraintName("FK_Tag_Rcm");

                    b.HasOne("ProDat.Web2.Models.SAPStatus", "SAPStatus")
                        .WithMany()
                        .HasForeignKey("SAPStatusId");

                    b.HasOne("ProDat.Web2.Models.SortField", "SortField")
                        .WithMany("Tags")
                        .HasForeignKey("SortFieldId");

                    b.HasOne("ProDat.Web2.Models.SubSystem", "SubSystem")
                        .WithMany("Tags")
                        .HasForeignKey("SubSystemId")
                        .HasConstraintName("FK_Tag_SubSystem");

                    b.HasOne("ProDat.Web2.Models.Vib", "Vib")
                        .WithMany("Tags")
                        .HasForeignKey("VibId")
                        .HasConstraintName("FK_Tag_Vib");

                    b.HasOne("ProDat.Web2.Models.WBSElement", "WBSElement")
                        .WithMany("Tags")
                        .HasForeignKey("WBSElementId");
                });

            modelBuilder.Entity("ProDat.Web2.Models.TagEngData", b =>
                {
                    b.HasOne("ProDat.Web2.Models.EngDataCode", "EngDataCode")
                        .WithMany("TagEngDatas")
                        .HasForeignKey("EngDataCodeId")
                        .HasConstraintName("FK_tagengdata_engdatacode")
                        .IsRequired();

                    b.HasOne("ProDat.Web2.Models.Tag", "Tag")
                        .WithMany("TagEngDatas")
                        .HasForeignKey("TagId")
                        .HasConstraintName("FK_tagengdata_Tag")
                        .IsRequired();
                });

            modelBuilder.Entity("ProDat.Web2.Models.TagPo", b =>
                {
                    b.HasOne("ProDat.Web2.Models.Po", "Po")
                        .WithMany("TagPos")
                        .HasForeignKey("Poid")
                        .HasConstraintName("FK_TagPO_PO")
                        .IsRequired();

                    b.HasOne("ProDat.Web2.Models.Tag", "Tag")
                        .WithMany("TagPos")
                        .HasForeignKey("TagId")
                        .HasConstraintName("FK_TagPO_Tag")
                        .IsRequired();
                });

            modelBuilder.Entity("ProDat.Web2.Models.TagViewColumns", b =>
                {
                    b.HasOne("ProDat.Web2.Models.TagView", null)
                        .WithMany("TagViewColumns")
                        .HasForeignKey("TagViewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProDat.Web2.Models.TagViewColumnsUser", b =>
                {
                    b.HasOne("ProDat.Web2.Models.TagViewColumns", null)
                        .WithMany("TagViewColumnsUser")
                        .HasForeignKey("TagViewColumnsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProDat.Web2.Models.TagXdoc", b =>
                {
                    b.HasOne("ProDat.Web2.Models.Doc", "Doc")
                        .WithMany("TagXdocs")
                        .HasForeignKey("DocId")
                        .HasConstraintName("FK_TagXDoc_Doc")
                        .IsRequired();

                    b.HasOne("ProDat.Web2.Models.Tag", "Tag")
                        .WithMany("TagXdocs")
                        .HasForeignKey("TagId")
                        .HasConstraintName("FK_TagXDoc_Tag")
                        .IsRequired();
                });

            modelBuilder.Entity("ProDat.Web2.Models.TaskListHeader", b =>
                {
                    b.HasOne("ProDat.Web2.Models.MaintPackage", "MaintPackage")
                        .WithMany("TaskListHeaders")
                        .HasForeignKey("MaintPackageId")
                        .HasConstraintName("FK_TaskListHeader_MaintPackage");

                    b.HasOne("ProDat.Web2.Models.MaintPlannerGroup", "MaintPlannerGroup")
                        .WithMany()
                        .HasForeignKey("MaintPlannerGroupId");

                    b.HasOne("ProDat.Web2.Models.MaintStrategy", "MaintStrategy")
                        .WithMany("TaskListHeaders")
                        .HasForeignKey("MaintStrategyId")
                        .HasConstraintName("FK_TaskListHeader_MaintStrategy");

                    b.HasOne("ProDat.Web2.Models.MaintWorkCentre", "MaintWorkCentre")
                        .WithMany("TaskListHeaders")
                        .HasForeignKey("MaintWorkCentreId")
                        .HasConstraintName("FK_TaskListHeader_MaintWorkCentre");

                    b.HasOne("ProDat.Web2.Models.MaintenancePlant", "MaintenancePlant")
                        .WithMany("TaskListHeaders")
                        .HasForeignKey("MaintenancePlantId")
                        .HasConstraintName("FK_TaskListHeader_MaintenancePlant");

                    b.HasOne("ProDat.Web2.Models.PerformanceStandard", "PerformanceStandard")
                        .WithMany("TaskListHeaders")
                        .HasForeignKey("PerformanceStandardId")
                        .HasConstraintName("FK_TaskListHeader_PerformanceStandard");

                    b.HasOne("ProDat.Web2.Models.Pmassembly", "Pmassembly")
                        .WithMany("TaskListHeaders")
                        .HasForeignKey("PmassemblyId")
                        .HasConstraintName("FK_TaskListHeader_PMAssembly");

                    b.HasOne("ProDat.Web2.Models.RegulatoryBody", "RegulatoryBody")
                        .WithMany("TaskListHeaders")
                        .HasForeignKey("RegulatoryBodyId")
                        .HasConstraintName("FK_TaskListHeader_RegulatoryBody");

                    b.HasOne("ProDat.Web2.Models.SAPStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");

                    b.HasOne("ProDat.Web2.Models.SysCond", "SysCond")
                        .WithMany()
                        .HasForeignKey("SysCondId");

                    b.HasOne("ProDat.Web2.Models.TaskListGroup", "TaskListGroup")
                        .WithMany()
                        .HasForeignKey("TaskListGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProDat.Web2.Models.TaskListCat", "TasklistCat")
                        .WithMany("TaskListHeaders")
                        .HasForeignKey("TasklistCatId")
                        .HasConstraintName("FK_TaskListHeader_TaskListCat");
                });

            modelBuilder.Entity("ProDat.Web2.Models.TaskListOperations", b =>
                {
                    b.HasOne("ProDat.Web2.Models.ControlKey", "ControlKey")
                        .WithMany()
                        .HasForeignKey("ControlKeyId")
                        .HasConstraintName("FK_TaskListOperations_ControlKey");

                    b.HasOne("ProDat.Web2.Models.Doc", "Doc")
                        .WithMany()
                        .HasForeignKey("DocId")
                        .HasConstraintName("FK_TaskListOperations_Doc");

                    b.HasOne("ProDat.Web2.Models.MaintPackage", "MaintPackage")
                        .WithMany()
                        .HasForeignKey("MaintPackageId")
                        .HasConstraintName("FK_TaskListOperations_MaintPackage");

                    b.HasOne("ProDat.Web2.Models.MaintWorkCentre", "MaintWorkCentre")
                        .WithMany()
                        .HasForeignKey("MaintWorkCentreId")
                        .HasConstraintName("FK_TaskListOperations_MaintWorkCentre");

                    b.HasOne("ProDat.Web2.Models.MaintenancePlant", "MaintenancePlant")
                        .WithMany()
                        .HasForeignKey("MaintenancePlantId")
                        .HasConstraintName("FK_TaskListOperations_MaintenancePlant");

                    b.HasOne("ProDat.Web2.Models.Operation", "Operation")
                        .WithMany()
                        .HasForeignKey("OperationId")
                        .HasConstraintName("FK_TaskListOperations_Operation");

                    b.HasOne("ProDat.Web2.Models.RelationshipToOperation", "RelationshiptoOperation")
                        .WithMany()
                        .HasForeignKey("RelationshiptoOperationId")
                        .HasConstraintName("FK_TaskListOperations_RelationshipToOperation");

                    b.HasOne("ProDat.Web2.Models.SysCond", "SysCond")
                        .WithMany()
                        .HasForeignKey("SysCondId")
                        .HasConstraintName("FK_TaskListOperations_SysCond");

                    b.HasOne("ProDat.Web2.Models.TaskListHeader", "TaskListHeader")
                        .WithMany()
                        .HasForeignKey("TaskListHeaderId");
                });

            modelBuilder.Entity("ProDat.Web2.Models.TaskListXscePsreview", b =>
                {
                    b.HasOne("ProDat.Web2.Models.ScePsreview", "ScePsreview")
                        .WithMany("TaskListXscePsreviews")
                        .HasForeignKey("ScePsreviewId")
                        .HasConstraintName("FK_TaskListXScePSReview_ScePSReview")
                        .IsRequired();

                    b.HasOne("ProDat.Web2.Models.TaskListHeader", "TaskListHeader")
                        .WithMany("TaskListXscePsreviews")
                        .HasForeignKey("TaskListHeaderId")
                        .HasConstraintName("FK_TaskListXScePSReview_TaskListHeader")
                        .IsRequired();
                });

            modelBuilder.Entity("ProDat.Web2.Models.UC2ViewColumnsUser", b =>
                {
                    b.HasOne("ProDat.Web2.Models.UC2ViewColumns", null)
                        .WithMany("UC2ViewColumnsUser")
                        .HasForeignKey("UC2ViewColumnsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
